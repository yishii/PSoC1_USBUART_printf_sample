 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: USBUART_drv.asm
 0000           ;;  Version: 1.0, Updated on 2006/10/20 at 16:08:45
 0000           ;;  Generated by PSoC Designer ver 4.3  b1884 : 23 June, 2006
 0000           ;;
 0000           ;;  DESCRIPTION: USBUART control endpoint driver
 0000           ;;               for the CY8C24090 and CY7C64215 family of devices
 0000           ;;
 0000           ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
 0000           ;;        arguments and observe the associated "Registers are volatile" policy.
 0000           ;;        This means it is the caller's responsibility to preserve any values
 0000           ;;        in the X and A registers that are still needed after the API functions
 0000           ;;        returns. For Large Memory Model devices it is also the caller's
 0000           ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and
 0000           ;;        MVW_PP registers. Even though some of these registers may not be modified
 0000           ;;        now, there is no guarantee that will remain the case in future releases.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2006. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 00C0           FLAG_PGMODE_MASK:  equ C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;------------------------------------------------
 0000           ;  PMA Data Registers
 0000           ;------------------------------------------------
 0000           
 0040           PMA0_DR:   	  equ 40h		   ; PMA Data Register                        (RW)
 0041           PMA1_DR:   	  equ 41h		   ; PMA Data Register                        (RW)
 0042           PMA2_DR:   	  equ 42h		   ; PMA Data Register                        (RW)
 0043           PMA3_DR:   	  equ 43h		   ; PMA Data Register                        (RW)
 0044           PMA4_DR:   	  equ 44h		   ; PMA Data Register                        (RW)
 0045           PMA5_DR:   	  equ 45h		   ; PMA Data Register                        (RW)
 0046           PMA6_DR:   	  equ 46h		   ; PMA Data Register                        (RW)
 0047           PMA7_DR:   	  equ 47h		   ; PMA Data Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Registers
 0000           ;------------------------------------------------
 0000           
 0048           USB_SOF0:     equ 48h		   ; SOF Frame Number LSB(7:0)                (R)
 0049           USB_SOF1:     equ 49h		   ; SOF Frame Number MSB(10:8)               (R)
 0000           
 004A           USB_CR0:      equ 4Ah		   ; USB Control Register 0                   (RW)
 0080           USB_CR0_ENABLE:       equ 80h    ; MASK: enable/disable USB SIE	          (RW)
 007F           USB_CR0_DEVICE_ADDR:  equ 7Fh    ; MASK: USB Device Address               (RW)
 0000           
 004B           USBIO_CR0:    equ 4Bh		   ; USB IO Control Register 0                (#)
 0080           USBIO_CR0_TEN:        equ 80h    ; MASK: enable/disable manual tx on D+ D-(RW)
 0040           USBIO_CR0_TSE0:       equ 40h    ; MASK: transmit a single ended 0        (RW)
 0020           USBIO_CR0_TD:         equ 20h    ; MASK: transmit J or K state on Bus     (RW)
 0001           USBIO_CR0_RD:         equ 01h    ; MASK: read state of differential rx    (R)
 0000           
 004C           USBIO_CR1:    equ 4Ch		   ; USB IO Control Register 0                (RW)
 0080           USBIO_CR1_IOMODE:     equ 80h    ; MASK: select Bit Bang Mode/USB Mode    (RW)
 0040           USBIO_CR1_DRIVE_MODE: equ 40h    ; MASK: select CMOS mode/Open Drain mode (RW)
 0020           USBIO_CR1_DPI:        equ 20h    ; MASK: drive D+ high/low                (RW)
 0010           USBIO_CR1_DMI:        equ 10h    ; MASK: drive D- high/low                (RW)
 0008           USBIO_CR1_PS2PUEN:    equ 08h    ; MASK: enable/disable 5K Pullup on D+/D-(RW)
 0004           USBIO_CR1_USBPUEN:    equ 04h    ; MASK: enable/disable USB Pullup on D+  (RW)
 0002           USBIO_CR1_DPO:        equ 02h    ; MASK: read D+ pin                      (R)
 0001           USBIO_CR1_DMO:        equ 01h    ; MASK: read D- pin                      (R)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Endpoint Registers
 0000           ;------------------------------------------------
 0000           
 004E           EP1_CNT1:     equ 4Eh		   ; Endpoint 1 Count Register 1              (#)
 0080           EP1_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP1_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP1_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 004F           EP1_CNT:      equ 4Fh		   ; Endpoint 1 Count Register 0              (RW)
 0000           
 0050           EP2_CNT1:     equ 50h		   ; Endpoint 2 Count Register 1              (#)
 0080           EP2_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP2_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP2_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0051           EP2_CNT:      equ 51h		   ; Endpoint 2 Count Register 0              (RW)
 0000           
 0052           EP3_CNT1:     equ 52h		   ; Endpoint 3 Count Register 1              (#)
 0080           EP3_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP3_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP3_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0053           EP3_CNT:      equ 53h		   ; Endpoint 3 Count Register 0              (RW)
 0000           
 0054           EP4_CNT1:     equ 54h		   ; Endpoint 4 Count Register 1              (#)
 0080           EP4_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP4_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP4_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0055           EP4_CNT:      equ 55h		   ; Endpoint 4 Count Register 0              (RW)
 0000           
 0056           EP0_CR:      equ 56h          ; Endpoint 0 Control Register 0            (#)
 0080           EP0_CR_SETUP_RCVD:   equ 80h    ; MASK: Setup received                   (RC)
 0040           EP0_CR_IN_RCVD:      equ 40h    ; MASK: IN received                      (RC)
 0020           EP0_CR_OUT_RCVD:     equ 20h    ; MASK: OUT received                     (RC)
 0010           EP0_CR_ACKD:         equ 10h    ; MASK: Acked transaction                (RC)
 000F           EP0_CR_MODE:         equ 0Fh    ; MASK: Mode response for endpoint       (RW)
 0000           
 0000           ; ------------------------------------------------------------------------------
 0000           ; The following defines are depricated.  Left here for compatibility. 
 0056           EP0_CR0:      equ 56h          ; Endpoint 0 Control Register 0            (#)
 0080           EP0_CR0_SETUP_RCVD:   equ 80h    ; MASK: Setup received                   (RC)
 0040           EP0_CR0_IN_RCVD:      equ 40h    ; MASK: IN received                      (RC)
 0020           EP0_CR0_OUT_RCVD:     equ 20h    ; MASK: OUT received                     (RC)
 0010           EP0_CR0_ACKD:         equ 10h    ; MASK: Acked transaction                (RC)
 000F           EP0_CR0_MODE:         equ 0Fh    ; MASK: Mode response for endpoint       (RW)
 0000           ; ------------------------------------------------------------------------------
 0000           
 0057           EP0_CNT:      equ 57h          ; Endpoint 0 Count Register                (#)
 0080           EP0_CNT_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP0_CNT_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (RC)
 000F           EP0_CNT_BYTE_CNT:    equ 0Fh    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0058           EP0_DR0:      equ 58h          ; Endpoint 0 Data Register 0               (RW)
 0059           EP0_DR1:      equ 59h          ; Endpoint 0 Data Register 1               (RW)
 005A           EP0_DR2:      equ 5Ah          ; Endpoint 0 Data Register 2               (RW)
 005B           EP0_DR3:      equ 5Bh          ; Endpoint 0 Data Register 3               (RW)
 005C           EP0_DR4:      equ 5Ch          ; Endpoint 0 Data Register 4               (RW)
 005D           EP0_DR5:      equ 5Dh          ; Endpoint 0 Data Register 5               (RW)
 005E           EP0_DR6:      equ 5Eh          ; Endpoint 0 Data Register 6               (RW)
 005F           EP0_DR7:      equ 5Fh          ; Endpoint 0 Data Register 7               (RW)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUXCFG:      equ 61h          ; Analog Mux Bus Configuration Register    (RW)
 0080           AMUXCFG_BCOL0_MUX:    equ 80h    ; MASK: select AMuxBusB for Col1 input   (RW)
 0040           AMUXCFG_ACOL0_MUX:    equ 40h    ; MASK: select AMuxBusA for Col0 input   (RW)  
 0030           AMUXCFG_INTCAP:       equ 30h    ; MASK: select pins for static operation (RW)
 000E           AMUXCFG_MUXCLK:       equ 0Eh    ; MASK: select precharge clock source    (RW)
 0001           AMUXCFG_EN:           equ 01h    ; MASK: enable/disable MUXCLK            (RW)
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_CLDIS0:       equ 10h    ; MASK: Column 0 comparator bus synch
 0002           CMP_CR1_CLDIX1:       equ 02h    ; MASK: Column 1 comparator bus synch
 0001           CMP_CR1_CLDIX0:       equ 01h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ DFh          ; USB Mask Register           (RW)
 0080           INT_MSK2_WAKEUP:           equ 80h ; MASK: enable/disable I2C interrupt
 0040           INT_MSK2_EP4:              equ 40h ; MASK: enable/disable SW interrupt
 0020           INT_MSK2_EP3:              equ 20h ; MASK: enable/disable I2C interrupt
 0010           INT_MSK2_EP2:              equ 10h ; MASK: enable/disable SW interrupt
 0008           INT_MSK2_EP1:              equ 08h ; MASK: enable/disable I2C interrupt
 0004           INT_MSK2_EP0:              equ 04h ; MASK: enable/disable SW interrupt
 0002           INT_MSK2_SOF:              equ 02h ; MASK: enable/disable I2C interrupt
 0001           INT_MSK2_BUS_RESET:        equ 01h ; MASK: enable/disable SW interrupt
 0000           
 00E0           INT_MSK0:     equ E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E4           DEC_DH:       equ E4h          ; Data High Register                       (RW)
 00E5           DEC_DL:       equ E5h          ; Data Low Register                        (RW)
 00E6           DEC_CR0:      equ E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  MAC Registers
 0000           ;------------------------------------------------------
 0000           
 00E8           MUL0_X:       equ E8h          ; Multiply Input X Register                (W)
 00E9           MUL0_Y:       equ E9h          ; Multiply Input Y Register                (W)
 00EA           MUL0_DH:      equ EAh          ; Multiply Result High Byte Register       (R)
 00EB           MUL0_DL:      equ EBh          ; Multiply Result Low Byte Register        (R)
 0000           
 00EC           ACC0_DR1:     equ ECh          ; Accumulator Data Register 1              (RW)
 00ED           ACC0_DR0:     equ EDh          ; Accumulator Data Register 0              (RW)
 00EE           ACC0_DR3:     equ EEh          ; Accumulator Data Register 3              (RW)
 00EF           ACC0_DR2:     equ EFh          ; Accumulator Data Register 2              (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  PMA Write and Read Registers
 0000           ;------------------------------------------------
 0000           
 0040           PMA0_WA:   	  equ 40h		   ; PMA Write Pointer Register               (RW)
 0041           PMA1_WA:   	  equ 41h		   ; PMA Write Pointer Register               (RW)
 0042           PMA2_WA:   	  equ 42h		   ; PMA Write Pointer Register               (RW)
 0043           PMA3_WA:   	  equ 43h		   ; PMA Write Pointer Register               (RW)
 0044           PMA4_WA:   	  equ 44h		   ; PMA Write Pointer Register               (RW)
 0045           PMA5_WA:   	  equ 45h		   ; PMA Write Pointer Register               (RW)
 0046           PMA6_WA:   	  equ 46h		   ; PMA Write Pointer Register               (RW)
 0047           PMA7_WA:   	  equ 47h		   ; PMA Write Pointer Register               (RW)
 0000           
 0050           PMA0_RA:   	  equ 50h		   ;  PMA Read Pointer Register               (RW)
 0051           PMA1_RA:   	  equ 51h		   ;  PMA Read Pointer Register               (RW)
 0052           PMA2_RA:   	  equ 52h		   ;  PMA Read Pointer Register               (RW)
 0053           PMA3_RA:   	  equ 53h		   ;  PMA Read Pointer Register               (RW)
 0054           PMA4_RA:   	  equ 54h		   ;  PMA Read Pointer Register               (RW)
 0055           PMA5_RA:   	  equ 55h		   ;  PMA Read Pointer Register               (RW)
 0056           PMA6_RA:   	  equ 56h		   ;  PMA Read Pointer Register               (RW)
 0057           PMA7_RA:   	  equ 57h		   ;  PMA Read Pointer Register               (RW)
 0000           
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus 0/1 To Global Out Enable  (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0065           CMP_GO_EN1:   equ 65h          ; Comparator Bus 2/3 To Global Out Enable  (RW)
 0080           CMP_GO_EN1_GOO7:      equ 80h    ; MASK: Selected Col 3 signal to GOO5
 0040           CMP_GO_EN1_GOO3:      equ 40h    ; MASK: Selected Col 3 signal to GOO1
 0030           CMP_GO_EN1_SEL3:      equ 30h    ; MASK: Column 3 Signal Select
 0008           CMP_GO_EN1_GOO6:      equ 08h    ; MASK: Selected Col 2 signal to GOO4
 0004           CMP_GO_EN1_GOO2:      equ 04h    ; MASK: Selected Col 2 signal to GOO0
 0003           CMP_GO_EN1_SEL2:      equ 03h    ; MASK: Column 2 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Registers
 0000           ;------------------------------------------------
 0000           
 00C1           USB_CR1:      equ C1h          ; USB Control Register 1                   (#)
 0004           USB_CR1_BUS_ACTIVITY: equ 04h    ; MASK: monitors activity on USB bus     (RC)
 0002           USB_CR1_ENABLE_LOCK:  equ 02h    ; MASK: enable/disable auto lock of osc  (RW)
 0001           USB_CR1_REG_ENABLE:   equ 01h    ; MASK: set mode to reg. on/pass thru    (RW)
 0000           
 00C4           EP1_CR0:      equ C4h          ; EP1 Control Register 0                   (#)
 0080           EP1_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP1_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP1_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP1_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C5           EP2_CR0:      equ C5h          ; EP2 Control Register 0                   (#)
 0080           EP2_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP2_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP2_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP2_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C6           EP3_CR0:      equ C6h          ; EP3 Control Register 0                   (#)
 0080           EP3_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP3_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP3_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP3_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C7           EP4_CR0:      equ C7h          ; EP4 Control Register 0                   (#)
 0080           EP4_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP4_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP4_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP4_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  AMuxBus Mux Control Registers
 0000           ;------------------------------------------------
 0000           
 00D8           MUX_CR0:      equ D8h          ; Analog Mux Bus Port 0 Bit Enables Reg    (RW)
 00D9           MUX_CR1:      equ D9h          ; Analog Mux Bus Port 1 Bit Enables Reg    (RW)
 00DA           MUX_CR2:      equ DAh          ; Analog Mux Bus Port 2 Bit Enables Reg    (RW)
 00DB           MUX_CR3:      equ DBh          ; Analog Mux Bus Port 3 Bit Enables Reg    (RW)
 00EC           MUX_CR4:      equ ECh          ; Analog Mux Bus Port 4 Bit Enables Reg    (RW)
 00ED           MUX_CR5:      equ EDh          ; Analog Mux Bus Port 5 Bit Enables Reg    (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ E7h          ; Data Control Register 2                  (RW)
 0000           
 00E8           IMO_TR:               equ E8h    ; Internal Main Oscillator Trim Register   (RW)
 00E9           ILO_TR:               equ E9h    ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:               equ EAh    ; Band Gap Trim Register                   (RW)
 00EB           ECO_TR:               equ EBh    ; External Oscillator Trim Register        (W)
 00EF           IMO_TR2:              equ EFh    ; Internal Main Oscillator Gain Trim Register (RW)
 0000           
 00FD           DAC_CR:       equ FDh          ; DAC Control Register                     (RW)
 0080           DAC_CR_SPLIT_MUX:     equ 80h    ; MASK: enable/disable Splitting of AMuxBuses
 0040           DAC_CR_MUXCLK_GE:     equ 40h    ; MASK: Connect/Disconnect AMuxBus to GOO[6]
 0008           DAC_CR_RANGE:	       equ 08h    ; MASK: High Range/Low Range
 0006           DAC_CR_OSCMODE:	    equ 06h    ; MASK: Sets Reset Mode for AMuxBus
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: enable/disable AMux Bus
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0003           SYSTEM_STACK_PAGE: equ 3   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C24x94 and CY8C29x66.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           
 0000           ;  ******* Page Pointer Manipulation Macros *******
 0000           ;
 0000           ;  Most of the following macros are conditionally compiled so they only
 0000           ;  produce code if the large memory model is selected.
 0000           
 0000              ;-----------------------------------------------
 0000              ;  Set Stack Page Macro
 0000              ;-----------------------------------------------
 0000              ;
 0000              ;  DESC: Modify STK_PP in the large or small memory Models.
 0000              ;
 0000              ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
 0000              ;        which stack operations like PUSH and POP store and retrieve their
 0000              ;        data
 0000              ;
 0000              ;  COST: 8 instruction cycles (in LMM only)
 0000           
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           MACRO GET_REG
 0000           IF TEST_BENCH
 0000               mov     a,[@0]                           ; Get the simulated reg
 0000           ELSE
 0000               mov     a,reg[@0]                        ; Get the real reg
 0000           ENDIF    
 0000           MACRO PUT_REG
 0000           IF TEST_BENCH
 0000               mov     [@0],a                           ; Set the simulated reg
 0000           ELSE
 0000               mov     reg[@0],a                        ; Set the real reg
 0000           ENDIF    
 0000           MACRO PUT_REG_CONST
 0000           IF TEST_BENCH
 0000               mov     [@0],@1                          ; Set the simulated reg
 0000           ELSE
 0000               mov     reg[@0],@1                       ; Set the real reg
 0000           ENDIF    
 0000           MACRO   GET_WORD
 0000                   RAM_X_POINTS_TO_STACKPAGE                    ; Since called by interrupt we can call this
 0000               PUSH A                              ; Quickly get a RAM temp
 0000               PUSH A                              ; Save the source MSB
 0000               ROMX                                ; Get the first byte
 0000               PUSH X                              ; Save X
 0000               MOV  X,SP                           ; Get SP, to index to the temp 
 0000               MOV  [X - 3],A                      ; Save the first byte
 0000               POP  X                              ; Get back the source LSB
 0000               POP  A                              ; And the MSB
 0000               INC  X                              ; Point to the second byte
 0000               ADC  A, 0                           ; 
 0000               ROMX                                ; Get the second byte
 0000               MOV  X,A                            ; Save it in X
 0000               POP  A                              ; And the first byte in A
 0000               RAM_CHANGE_PAGE_MODE 00             ; Reset stack mode back
 0000           MACRO   NULL_PTR_CHECK
 0000               SWAP    A, X                        ; LSB non-zero?
 0000               JNZ     .ok                         ; Exit on non-zero
 0000               SWAP    A, X                        ; MSB zero
 0000               JZ      @0                          ; Jump to the null pointer handler
 0000               JMP     .exit
 0000           .ok:
 0000               SWAP    A, X                        ; Put them back
 0000           .exit:
 0000           NULL_PTR:   EQU 0                       ; Null pointer value
 0000           
 0000           ;--------------------------------------------------
 0000           ; Transfer Descriptor--Data Source
 0000           ;--------------------------------------------------
 0000           USB_DS_ROM:                                      EQU 0x00
 0001           USB_DS_RAM:                                      EQU 0x01
 0002           USB_DS_RAM_CB:                                   EQU 0x02
 0003           USB_DS_RAM_MASK:                                 EQU 0x03
 0000           
 0000           ;--------------------------------------------------
 0000           ; TRANSFER DESCRIPTOR MACROS
 0000           ;--------------------------------------------------
 0000           
 0000           ;-----------------------------------------------
 0000           ; TD_START_TABLE MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = Number of table entries
 0000           ; Register setup
 0000           ;   N/A (builds ROM data at assembly time)
 0000           ;-----------------------------------------------
 0000           MACRO   TD_START_TABLE
 0000               DB      ((@0) - 1)                 ; Number of table entries - 1
 0000           MACRO   TD_ENTRY
 0000               DB  @0                             ; Data source (USB_DS_*)
 0000               DW  @1                             ; Transfer size
 0000               DW  @2                             ; Data source address
 0000               DW  @3                             ; Transfer Completion Status Block Address
 0000               DB  0xde                           ; Reserved 
 0008           TD_ENTRY_SIZE:                         EQU 8
 0001           TD_START_SIZE:                         EQU 1
 0000           ;-----------------------------------------------
 0000           ; TD_INDEX_TO_OFFSET MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = RAM address of Index
 0000           ; Register setup
 0000           ;   A = DC (restored)
 0000           ;   X = DC (not used)
 0000           ;--------------------------------------------------
 0000           MACRO   TD_INDEX_TO_OFFSET
 0000               PUSH    A                          ; Save a work register
 0000               ASL     [@0]                       ; Index * 2
 0000               ASL     [@0]                       ; Index * 4
 0000               ASL     [@0]                       ; Index * 8
 0000               POP     A                          ; Restore the work register
 0000           MACRO LT_START
 0000               DB      (@0)                       ; Table size
 0000           MACRO LT_ENTRY
 0000               DW      (@0)                       ; Table entry
 0000               DW      (@1)                       ; Table entry
 0002           LT_ENTRY_SIZE:                         EQU 2
 0001           LT_START_SIZE:                         EQU 1
 0000           
 0000           ;-----------------------------------------------
 0000           ; LT_INDEX_TO_OFFSET MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = RAM address of Index
 0000           ; Register setup
 0000           ;   A = DC (not used)
 0000           ;   X = DC (not used)
 0000           ;--------------------------------------------------
 0000           MACRO   LT_INDEX_TO_OFFSET
 0000               ASL     [@0]                       ; Simply shift (mult by 2)
 0000               ASL     [@0]                       ;              (mult by 4)
 0000           MACRO DISPATCHER
 0000               CMP   A,@1
 0000               JNC   .dispatch_not_supported
 0000               ASL   A
 0000               JACC  @0
 0000           .dispatch_not_supported:
 0000               LJMP  @2    
 0001           USB_NOT_SUPPORTED:  EQU 0x01
 0002           USB_UM_SUPPLIED:    EQU 0x02
 0004           USB_APP_SUPPLIED:   EQU 0x04
 0000           ; end of file USBUART_macro.inc
 00DF           USBUART_INT_REG:                           equ 0xDF
 0001           USBUART_INT_RESET_MASK:                    equ 0x01
 0002           USBUART_INT_SOF_MASK:                      equ 0x02
 0004           USBUART_INT_EP0_MASK:                      equ 0x04
 0008           USBUART_INT_EP1_MASK:                      equ 0x08
 0010           USBUART_INT_EP2_MASK:                      equ 0x10
 0020           USBUART_INT_EP3_MASK:                      equ 0x20
 0040           USBUART_INT_EP4_MASK:                      equ 0x40
 0080           USBUART_INT_WAKEUP_MASK:                   equ 0x80
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for USBUART API's.
 0000           ;--------------------------------------------------
 0002           USBUART_3V_OPERATION:              EQU 0x02
 0003           USBUART_5V_OPERATION:              EQU 0x03
 0000           
 0000           USBUART_1_STOPBIT:                 EQU 0x00    
 0001           USBUART_1_5_STOPBIT:               EQU 0x01    
 0002           USBUART_2_STOPBIT:                 EQU 0x02
 0000           
 0000           USBUART_PARITY_NONE:               EQU 0x00    
 0001           USBUART_PARITY_ODD:                EQU 0x01    
 0002           USBUART_PARITY_EVEN:               EQU 0x02    
 0003           USBUART_PARITY_MARK:               EQU 0x03    
 0004           USBUART_PARITY_SPACE:              EQU 0x04    
 0000           
 0001           USBUART_DTR:                       EQU 0x01    
 0002           USBUART_RTS:                       EQU 0x02
 0000                                                       
 0001           USBUART_DCD:                       EQU 0x01    
 0002           USBUART_DSR:                       EQU 0x02    
 0004           USBUART_BREAK:                     EQU 0x04    
 0008           USBUART_RING:                      EQU 0x08    
 0010           USBUART_FRAMING_ERR:               EQU 0x10    
 0020           USBUART_PARITY_ERR:                EQU 0x20    
 0040           USBUART_OVERRUN:                   EQU 0x40    
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for USBUART API's.
 0000           ;--------------------------------------------------
 0000           
 0003           USBUART_bNumStringDescrs:              EQU 0x03
 0000           
 0005           USB_NUM_ENDPOINTS:                          EQU 5 
 0004           USB_MAX_EP_NUMBER:                          EQU (USB_NUM_ENDPOINTS - 1) 
 0000           
 0000           ;--------------------------------------------------
 0000           ; Registers for USBUART API's.
 0000           ;--------------------------------------------------
 0000           
 004A           USBUART_ADDR:                               EQU 0x4a
 004B           USBUART_USBIO_CR0:                          EQU 0x4b
 004C           USBUART_USBIO_CR1:                          EQU 0x4c
 00C1           USBUART_USB_CR1:                            EQU 0xc1 
 0000           
 0056           USBUART_EP0MODE:                            EQU 0x56
 0057           USBUART_EP0CNT:                             EQU 0x57
 0058           USBUART_EP0DATA:                            EQU 0x58
 00C4           USBUART_EP1MODE:                            EQU 0xc4
 004F           USBUART_EP1CNT0:                            EQU 0x4f
 004E           USBUART_EP1CNT1:                            EQU 0x4e
 00C5           USBUART_EP2MODE:                            EQU 0xc5
 0051           USBUART_EP2CNT0:                            EQU 0x51
 0050           USBUART_EP2CNT1:                            EQU 0x50
 00C6           USBUART_EP3MODE:                            EQU 0xc6
 0053           USBUART_EP3CNT0:                            EQU 0x53
 0052           USBUART_EP3CNT1:                            EQU 0x52
 00C7           USBUART_EP4MODE:                            EQU 0xc7
 0055           USBUART_EP4CNT0:                            EQU 0x55
 0054           USBUART_EP4CNT1:                            EQU 0x54
 0000           
 0000           ;--------------------------------------------------
 0000           ; Endpoint 0 offsets (Table 9-2)
 0000           ;--------------------------------------------------
 0000           bmRequestType:                              EQU 0
 0001           bRequest:                                   EQU 1
 0002           wValue:                                     EQU 2
 0003           wValueHi:                                   EQU 3
 0002           wValueLo:                                   EQU 2
 0004           wIndex:                                     EQU 4
 0005           wIndexHi:                                   EQU 5
 0004           wIndexLo:                                   EQU 4
 0006           wLength:                                    EQU 6
 0007           wLengthHi:                                  EQU 7
 0006           wLengthLo:                                  EQU 6
 0000           
 0000           ;--------------------------------------------------
 0000           ; Request Types (Table 9-4)
 0000           ;--------------------------------------------------
 0000           USB_GET_STATUS:                             EQU    0x00
 0001           USB_CLEAR_FEATURE:                          EQU    0x01
 0003           USB_SET_FEATURE:                            EQU    0x03
 0005           USB_SET_ADDRESS:                            EQU    0x05
 0006           USB_GET_DESCRIPTOR:                         EQU    0x06
 0007           USB_SET_DESCRIPTOR:                         EQU    0x07
 0008           USB_GET_CONFIGURATION:                      EQU    0x08
 0009           USB_SET_CONFIGURATION:                      EQU    0x09
 000A           USB_GET_INTERFACE:                          EQU    0x0A
 000B           USB_SET_INTERFACE:                          EQU    0x0B
 000C           USB_SYNCH_FRAME:                            EQU    0x0C
 0000           
 0000           ;--------------------------------------------------
 0000           ; Descriptor Types (Table 9-5)
 0000           ;--------------------------------------------------
 0001           DESCR_TYPE_DEVICE:                          EQU     1
 0002           DESCR_TYPE_CONFIG:                          EQU     2
 0003           DESCR_TYPE_STRING:                          EQU     3
 0004           DESCR_TYPE_INTERFACE:                       EQU     4
 0005           DESCR_TYPE_ENDPOINT:                        EQU     5
 0006           DESCR_TYPE_DEVICE_QUALIFIER:                EQU     6
 0007           DESCR_TYPE_OTHER_SPEED:                     EQU     7
 0008           DESCR_TYPE_INTERFACE_POWER:                 EQU     8
 0000           
 0000           ;--------------------------------------------------
 0000           ; Feature Selectors (Table 9-6)
 0000           ;--------------------------------------------------
 0001           USB_DEVICE_REMOTE_WAKEUP:                   EQU    0x01
 0000           USB_ENDPOINT_HALT:                          EQU    0x00
 0002           USB_TEST_MODE:                              EQU    0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Device Status (Figure 9-4)
 0000           ;--------------------------------------------------
 0000           USB_DEVICE_STATUS_BUS_POWERED:              EQU   0x00
 0001           USB_DEVICE_STATUS_SELF_POWERED:             EQU   0x01
 0002           USB_DEVICE_STATUS_REMOTE_WAKEUP:            EQU   0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Status (Figure 9-4)
 0000           ;--------------------------------------------------
 0001           USB_ENDPOINT_STATUS_HALT:                   EQU    0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Directions
 0000           ;--------------------------------------------------
 0080           USB_DIR_IN:                                 EQU    0x80
 0000           USB_DIR_OUT:                                EQU    0x00
 007F           USB_DIR_UNUSED:                             EQU    0x7F
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Address Symbols 
 0000           ;--------------------------------------------------
 0000           EP0:                                        EQU    0x00
 0001           EP1:                                        EQU    0x01
 0002           EP2:                                        EQU    0x02
 0003           EP3:                                        EQU    0x03
 0004           EP4:                                        EQU    0x04
 0000           
 0000           ;--------------------------------------------------
 0000           ; Control Endpoint States--These act as JACC jump values
 0000           ;--------------------------------------------------
 0000           USB_TRANS_STATE_IDLE:                       EQU     0x00         ;
 0002           USB_TRANS_STATE_CONTROL_READ:               EQU     0x02         ;
 0004           USB_TRANS_STATE_CONTROL_WRITE:              EQU     0x04         ;
 0006           USB_TRANS_STATE_NO_DATA_CONTROL:            EQU     0x06         ;
 0000           
 0000           ;--------------------------------------------------
 0000           ; Control Write flag values to indicate pending data changes
 0000           ;--------------------------------------------------
 0001           USB_ADDRESS_CHANGE_PENDING:     EQU     0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; Register Constants for USBUART
 0000           ;--------------------------------------------------
 0080           USB_ADDR_ENABLE:                             EQU    0x80
 0040           USB_CNT_VALID:                               EQU    0x40
 0080           USB_CNT_TOGGLE:                              EQU    0x80
 0004           USB_PULLUP_ENABLE:                          EQU    0x04
 0000           USB_AUTO_DPDM:                               EQU    0x00
 0003           USB_REG_ENABLE:                              EQU    0x03 
 0002           USB_PASS_THRU:                               EQU    0x02
 0004           USB_BUS_ACTIVITY:                            EQU    0x04
 0000           
 0000           USB_MODE_DISABLE:                            EQU 0x00
 0001           USB_MODE_NAK_IN_OUT:                         EQU 0x01
 0002           USB_MODE_STATUS_OUT_ONLY:                    EQU 0x02
 0003           USB_MODE_STALL_IN_OUT:                       EQU 0x03
 0004           USB_MODE_RESERVED_0100:                      EQU 0x04
 0005           USB_MODE_ISO_OUT:                            EQU 0x05
 0006           USB_MODE_STATUS_IN_ONLY:                     EQU 0x06
 0007           USB_MODE_ISO_IN:                             EQU 0x07
 0008           USB_MODE_NAK_OUT:                            EQU 0x08
 0009           USB_MODE_ACK_OUT:                            EQU 0x09
 000A           USB_MODE_RESERVED_1010:                      EQU 0x0A
 000B           USB_MODE_ACK_OUT_STATUS_IN:                  EQU 0x0B
 000C           USB_MODE_NAK_IN:                             EQU 0x0C
 000D           USB_MODE_ACK_IN:                             EQU 0x0D
 000E           USB_MODE_RESERVED_1110:                      EQU 0x0E
 000F           USB_MODE_ACK_IN_STATUS_OUT:                  EQU 0x0F
 0080           USB_MODE_STALL_DATA_EP:                      EQU 0x80
 0000           
 0000           ;--------------------------------------------------
 0000           ; LoadInEP Count Toggle (Argument values)
 0000           ;--------------------------------------------------
 0000           USB_NO_TOGGLE:                               EQU 0x00
 0001           USB_TOGGLE:                                  EQU 0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; FORCE J/K/SE0 (Argument values)
 0000           ;--------------------------------------------------
 00A0           USB_FORCE_J:                                 EQU 0xA0
 0080           USB_FORCE_K:                                 EQU 0x80
 00C0           USB_FORCE_SE0:                               EQU 0xC0
 0000           USB_FORCE_NONE:                              EQU 0x00
 0001           USB_FORCE_STATE:                             EQU 0x01
 0000           
 0000           ;-----------------------------------------------
 0000           ; Endpoint event flags
 0000           ;-----------------------------------------------
 0002           NO_EVENT_ALLOWED:       equ               2
 0001           EVENT_PENDING:      equ               1
 0000           NO_EVENT_PENDING:   equ               0
 0000           
 0000           IN_BUFFER_FULL:     equ               NO_EVENT_PENDING
 0001           IN_BUFFER_EMPTY:    equ               EVENT_PENDING
 0001           OUT_BUFFER_FULL:    equ               EVENT_PENDING
 0000           OUT_BUFFER_EMPTY:   equ               NO_EVENT_PENDING
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Request Dispatch Functions, including overrides
 0000           ;--------------------------------------------------
 0001           USB_NOT_SUPPORTED:  EQU 0x01
 0002           USB_UM_SUPPLIED:    EQU 0x02
 0004           USB_APP_SUPPLIED:   EQU 0x04
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Device (dev)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_dev_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_dev_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_05: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_dev_06: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_dev_07: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_dev_08: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Device (dev)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_dev_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_01: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_02: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_03: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_04: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_05: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_dev_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_dev_08: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_09: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Interface (ifc)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_ifc_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_ifc_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_05: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_08: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_09: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_ifc_10: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_ifc_00: equ USB_NOT_SUPPORTED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Endpoint (ep)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_ep_00: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Endpoint (ep)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_ep_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_ep_01: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_ep_02: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_ep_03: equ USB_UM_SUPPLIED
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Standard Requests
 0000           ;-----------------------------------------------
 0001           USB_CB_h2d_std_dev: equ 1
 0001           USB_CB_h2d_std_ifc: equ 1
 0001           USB_CB_h2d_std_ep:  equ 1
 0000           USB_CB_h2d_std_oth: equ 0
 0001           USB_CB_d2h_std_dev: equ 1
 0001           USB_CB_d2h_std_ifc: equ 1
 0001           USB_CB_d2h_std_ep:  equ 1
 0000           USB_CB_d2h_std_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Class Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_cls_dev: equ 0
 0001           USB_CB_h2d_cls_ifc: equ 1
 0000           USB_CB_h2d_cls_ep:  equ 0
 0000           USB_CB_h2d_cls_oth: equ 0
 0000           USB_CB_d2h_cls_dev: equ 0
 0001           USB_CB_d2h_cls_ifc: equ 1
 0000           USB_CB_d2h_cls_ep:  equ 0
 0000           USB_CB_d2h_cls_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Vendor Specific Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_vnd_dev: equ 0
 0000           USB_CB_h2d_vnd_ifc: equ 0
 0000           USB_CB_h2d_vnd_ep:  equ 0
 0000           USB_CB_h2d_vnd_oth: equ 0
 0000           USB_CB_d2h_vnd_dev: equ 0
 0000           USB_CB_d2h_vnd_ifc: equ 0
 0000           USB_CB_d2h_vnd_ep:  equ 0
 0000           USB_CB_d2h_vnd_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Reserved Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_rsv_dev: equ 0
 0000           USB_CB_h2d_rsv_ifc: equ 0
 0000           USB_CB_h2d_rsv_ep:  equ 0
 0000           USB_CB_h2d_rsv_oth: equ 0
 0000           USB_CB_d2h_rsv_dev: equ 0
 0000           USB_CB_d2h_rsv_ifc: equ 0
 0000           USB_CB_d2h_rsv_ep:  equ 0
 0000           USB_CB_d2h_rsv_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; Transfer Completion Notification
 0000           ;-----------------------------------------------
 0000           USB_XFER_IDLE:         equ      0x00
 0001           USB_XFER_STATUS_ACK:   equ      0x01
 0002           USB_XFER_PREMATURE:    equ      0x02
 0003           USB_XFER_ERROR:        equ      0x03
 0000           
 0000           ; This macro is used to allocate a completion status block
 0000           ; for all Requests.  The macro parameter is used
 0000           ; to prefix the two data elements.
 0000           USB_XFER_STATUS:       equ      0
 0001           USB_XFER_LENGTH:       equ      1
 0000           MACRO    USB_XFER_STATUS_BLOCK
 0000               BLK    1    ; Completion Status
 0000               BLK    2    ; Transfer Length
 0000           USBUART_VSR_SUPPORT: EQU 0
                IF USB_CB_h2d_vnd_dev
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_ifc
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_ep
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_oth
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_dev
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_ifc
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_ep
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_oth
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                
                ; end of file USBUART.inc
                
                ;-----------------------------------------------
                ;  Global Symbols
                ;-----------------------------------------------
                export _USBUART_EP0_ISR
                export  USBUART_InitControlRead
                export _USBUART_InitControlRead
                export  USBUART_InitControlWrite
                export _USBUART_InitControlWrite
                export  USBUART_InitNoDataStageControlTransfer
                export _USBUART_InitNoDataStageControlTransfer
                export  USBUART_NoDataStageControlTransfer
                
                ;-----------------------------------------------
                ;  Macro Definitions
                ;-----------------------------------------------
                
                ;-----------------------------------------------
                ;  Constant Definitions
                ;-----------------------------------------------
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                AREA InterruptRAM (RAM,REL,CON)
                ;----------------------------------------------------------------------------
                ; Current Device
                ;----------------------------------------------------------------------------
                EXPORT USBUART_bCurrentDevice, _USBUART_bCurrentDevice
 0000            USBUART_bCurrentDevice:
 0000           _USBUART_bCurrentDevice:                BLK   1    ;  Current Device
 0001           ;----------------------------------------------------------------------------
 0001           ; Current Configuration
 0001           ;----------------------------------------------------------------------------
                EXPORT USBUART_Configuration, _USBUART_Configuration
 0001            USBUART_Configuration:
 0001           _USBUART_Configuration:                 BLK   1    ;  Current Configuration
 0002           ;----------------------------------------------------------------------------
 0002           ; Current Device Status
 0002           ;----------------------------------------------------------------------------
                EXPORT USBUART_DeviceStatus, _USBUART_DeviceStatus
 0002            USBUART_DeviceStatus:
 0002           _USBUART_DeviceStatus:                  BLK   1    ;  Current Device Status
 0003           ;----------------------------------------------------------------------------
 0003           ; Interface Setting
 0003           ;----------------------------------------------------------------------------
                EXPORT USBUART_InterfaceSetting, _USBUART_InterfaceSetting
 0003            USBUART_InterfaceSetting:
 0003           _USBUART_InterfaceSetting:              BLK   2    ; Interface Setting
 0005           ;----------------------------------------------------------------------------
 0005           ; Endpoint Status--USB Status
 0005           ;----------------------------------------------------------------------------
                EXPORT USBUART_EndpointStatus, _USBUART_EndpointStatus
 0005            USBUART_EndpointStatus:
 0005           _USBUART_EndpointStatus:                BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
 000A           ;----------------------------------------------------------------------------
 000A           ; Last Packet Size
 000A           ;----------------------------------------------------------------------------
                EXPORT USBUART_LastSize 
 000A            USBUART_LastSize:                      BLK   1    ; Last Packet Size
 000B           ;----------------------------------------------------------------------------
 000B           ; Control Transfer State Machine
 000B           ; State values for Control Write
 000B           ; State values for Control Read
 000B           ;----------------------------------------------------------------------------
                EXPORT USBUART_TransferType 
 000B            USBUART_TransferType:                  BLK   1    ; Control Transfer State Machine
 000C           ;----------------------------------------------------------------------------
 000C           ; Control Transfer Intermediate Buffer--Shared among the requests
 000C           ;----------------------------------------------------------------------------
                EXPORT USBUART_TransferBuffer 
 000C            USBUART_TransferBuffer:                BLK   8
 0014           ;----------------------------------------------------------------------------
 0014           ; Transfer Descriptor Data for Control Transfer
 0014           ;  --The following data have the same format as the first 5 bytes of the TD_ENTRY
 0014           ;----------------------------------------------------------------------------
 0014           ; Control Transfer Data Source
 0014           ;   USB_DS_ROM
 0014           ;   USB_DS_RAM
 0014           ;   USB_DS_RAM_AS_NEEDED
 0014           ;----------------------------------------------------------------------------
                EXPORT USBUART_CurrentTD, _USBUART_CurrentTD
 0014           _USBUART_CurrentTD:
 0014            USBUART_CurrentTD:
                EXPORT USBUART_DataSource, _USBUART_DataSource
 0014           _USBUART_DataSource:
 0014            USBUART_DataSource:                    BLK   1
 0015           ;----------------------------------------------------------------------------
 0015           ; Control Transfer Data Size
 0015           ;----------------------------------------------------------------------------
                EXPORT USBUART_TransferSize, _USBUART_TransferSize
 0015           _USBUART_TransferSize:
 0015            USBUART_TransferSize:                  BLK   2
 0017           ;----------------------------------------------------------------------------
 0017           ; Control Transfer Data Pointer
 0017           ;   Source for Control Read
 0017           ;   Destination for Control Write
 0017           ;----------------------------------------------------------------------------
                EXPORT USBUART_DataPtr, _USBUART_DataPtr
 0017           _USBUART_DataPtr: 
 0017            USBUART_DataPtr:                       BLK   2
 0019           ;----------------------------------------------------------------------------
 0019           ; Transfer Completion Notification
 0019           ;----------------------------------------------------------------------------
                EXPORT USBUART_StatusBlockPtr, _USBUART_StatusBlockPtr
 0019           _USBUART_StatusBlockPtr: 
 0019            USBUART_StatusBlockPtr:                BLK   2
 001B           
 001B           ;----------------------------------------------------------------------------
 001B           ; Control Transfer _TransferByteCount (Actually transferred)
 001B           ;----------------------------------------------------------------------------
 001B            USBUART_TransferByteCount:             BLK   2
 001D           
 001D           ;----------------------------------------------------------------------------
 001D           ; Control Endpoint Data toggle
                EXPORT USBUART_EPDataToggle, _USBUART_EPDataToggle
 001D            _USBUART_EPDataToggle:
 001D            USBUART_EPDataToggle:
 001D            USBUART_EP0DataToggle:                 BLK   USB_NUM_ENDPOINTS
 0022           ;----------------------------------------------------------------------------
 0022           ; Control Endpoint Data Pending Flag
                EXPORT USBUART_fDataPending
 0022            USBUART_fDataPending:                  BLK   1
 0023           ;----------------------------------------------------------------------------
 0023           ; Control Endpoint Data Pending Flag
 0023           ;EXPORT USBUART_PendingData
 0023           ;  USBUART_PendingData:                 BLK   1
 0023           ;----------------------------------------------------------------------------
 0023           ; Temporary Data registers
                EXPORT USBUART_t2, USBUART_t1, USBUART_t0
 0023            USBUART_t2:                            BLK   1    ; Temporary shared by the UM
 0024            USBUART_t1:                            BLK   1    ; Temporary shared by the UM
 0025            USBUART_t0:                            BLK   1    ; Temporary shared by the UM
 0026           
 0026           ;EXPORT USBUART_IntState
 0026           ; USBUART_IntState:                     BLK  1
 0026           ;EXPORT USBUART_StackPointer
 0026           ; USBUART_StackPointer:                 BLK  1
 0026           ;EXPORT USBUART_TempMode
 0026           ; USBUART_TempMode:                     BLK 1
 0026           ;----------------------------------------------------------------------------
 0026           ; Endpoint Transfer--API Status
 0026           ;----------------------------------------------------------------------------
                EXPORT USBUART_EndpointAPIStatus, _USBUART_EndpointAPIStatus
 0026            USBUART_EndpointAPIStatus:
 0026           _USBUART_EndpointAPIStatus:             BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
 002B           
                AREA UserModules (ROM, REL)
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_EP0_ISR
                
                ;
                ;  DESCRIPTION:   The EPO ISR serves the control endpoint interrupts and
                ;                 dispatches all SETUP, IN, and OUT transfers to the proper
                ;                 dispatch routines for all supported USB requests.
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:   n/a
                ;
                ;  RETURNS:     n/a
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
 0000            USBUART_EP0_ISR:
 0000           _USBUART_EP0_ISR:
 0000 08                push A
 0001 10                push X
 0002 5DD5         mov   A, reg[ MVW_PP ]
 0004 08           push  A
 0005 5DD4         mov   A, reg[ MVR_PP ]
 0007 08           push  A
 0008           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0008 62D500          mov reg[MVW_PP], 0
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 000B 62D400          mov reg[MVR_PP], 0
                   ENDIF
                
                    ; Dispatch to setup/in/out handlers
 000E 5D56          MOV  A, reg[USBUART_EP0MODE]        ; Get the mode reg
 0010           
 0010               ; MSB is the SETUP bit, followed by IN, then OUT
 0010 64            ASL  A                              ; Shift to the carry and jump if SETUP bit set
 0011 C017          JC   USBUART_EP0_Setup
 0013           
 0013 64            ASL  A                              ; Shift to the carry and jump if IN bit set
 0014 C034          JC   USBUART_EP0_IN
 0016           
 0016 64            ASL  A                              ; Shift to the carry and jump if OUT bit set
 0017 C03D          JC   USBUART_EP0_OUT
 0019           
 0019 825F          JMP    USBUART_Not_Supported_Local_Drv
 001B           
 001B           ; ISR Exit Point to update the mode register
 001B           ;   mode and count have been pushed onto the stack
                EXPORT USBUART_EP0_UPD_MODE_EXIT
 001B           USBUART_EP0_UPD_MODE_EXIT:
 001B           
 001B 6057          MOV    REG[USBUART_EP0CNT], A      ; Update the count
 001D 5B            MOV    A, X                        ; Get the new mode
 001E 6056          MOV    REG[USBUART_EP0MODE], A     ; Update the node
 0020           
 0020           ; Common Exit Point
 0020           USBUART_EP0_ISR_EXIT:
 0020 18           pop   A
 0021 60D4         mov   reg[ MVR_PP ], A
 0023 18           pop   A
 0024 60D5         mov   reg[ MVW_PP ], A
 0026 20            POP  X                              ;
 0027           ;       MOV  A, [USBUART_TempMode]
 0027           ;       MOV  reg[USBUART_EP0MODE], A
 0027 18            POP  A                              ; Restore Context
 0028 7E            RETI
 0029           
 0029           
 0029           ;-----------------------------------------------------------------------------
 0029           ;  FUNCTION NAME: USBUART_EP0_Setup
 0029           ;
 0029           ;  DESCRIPTION:   Dispatch a USB SETUP
 0029           ;
 0029           ;-----------------------------------------------------------------------------
 0029            USBUART_EP0_Setup:
 0029           _USBUART_EP0_Setup:
 0029           ; Check the byte count and validity.  All SETUP are 8 bytes and 0 toggle
 0029 08            PUSH    A                          ; Save the mode register
 002A 5002          MOV     A, USB_XFER_PREMATURE      ; Return a Premature Completion?
 002C 91DA          CALL    USBUART_UpdateStatusBlock
 002E 18            POP     A                          ; Restore the mode register
 002F 5D57          MOV    A, REG[USBUART_EP0CNT]            ; Get the count reg
 0031 394A          CMP    A, (USB_CNT_VALID | 0x0A)
 0033 A003          JZ      .dispatch
 0035           
 0035 8243          JMP    USBUART_Not_Supported_Local_Drv
 0037           
 0037           
 0037           ;-----------------------------------------------------------------------------
 0037           ; Jump here to dispatch the request
 0037           ; The SETUP request is encoded in [bmRequestType]. Among the 8 bits in [bmRequestType], only bits
 0037           ; 7,6,5,1,0 determine what the request is. Bits [2:4] are default to zero. The below code
 0037           ; re-organizes [bmRequestType] to the following format:
 0037           ; ( Zero, Zero, Bit7, Bit6, Bit5, Bit1, Bit0, Zero ), and depending on the value of this
 0037           ; "re-organization", the firmware will jump to an appropriate table to handle the request.
 0037           ;-----------------------------------------------------------------------------
 0037           .dispatch:
 0037 5D58          MOV     A, REG[USBUART_EP0DATA+bmRequestType]   ; Get bmRequestType
 0039 21E3          AND     A, E3h                           ; clear bits 4-3-2, these unused for our purposes
 003B 08            PUSH    A                                ; store value on the stack
 003C 67            ASR     A                                ; move bits 7-6-5 into 4-3-2's place
 003D 67            ASR     A                                ; "asr" instruction shift all bits one place to the right.
 003E 67            ASR     A                                ; Bit7 remains the same.
 003F 5323          MOV     [USBUART_t2], A                  ; store shifted value
 0041 18            POP     A                                ; get original value
 0042 2A23          OR      A, [USBUART_t2]                  ; or the two to get the 5-bit field
 0044 211F          AND     A, 1Fh                           ; clear bits 7-6-5 (asr wraps bit7)
 0046                                                        ; Bit0 is loaded with a Zero. This results in multiplying
 0046                                                        ; the accumulator by 2, and the reason to multiply it by 2
 0046                                                        ; is that each "jmp" instruction in the tables is two bytes long.
 0046           
 0046 7D026F        LJMP USBUART_bmRequestType_Dispatch
 0049           
 0049           
 0049           ;-----------------------------------------------------------------------------
 0049           ;  FUNCTION NAME: USBUART_EP0_IN
 0049           ;
 0049           ;  DESCRIPTION: Handles an IN request.  Depending on the state of the
 0049           ;               enumeration sequence it decides what to do next
 0049           ;
 0049           ;-----------------------------------------------------------------------------
 0049            USBUART_EP0_IN:
 0049           _USBUART_EP0_IN:
 0049           
 0049 510B          MOV  A, [USBUART_TransferType]
 004B           ;    CALL USBUART_ControlInDispatch
 004B           ;    JMP  USBUART_EP0_ISR_EXIT               ; And exit
 004B           USBUART_ControlInDispatch:
 004B E001          JACC    USBUART_ControlInDispatchTable
 004D           USBUART_ControlInDispatchTable:
 004D 822B          JMP     USBUART_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
 004F 8037          JMP     USBUART_ControlReadDataStage     ; USB_TRANS_STATE_CONTROL_READ
 0051 80AD          JMP     USBUART_ControlWriteStatusStage  ; USB_TRANS_STATE_CONTROL_WRITE
 0053 80B8          JMP     USBUART_NoDataControlStatusStage ; USB_TRANS_STATE_NO_DATA_CONTROL
 0055           
 0055           
 0055           ;-----------------------------------------------------------------------------
 0055           ;  FUNCTION NAME: USBUART_EP0_OUT
 0055           ;
 0055           ;  DESCRIPTION: HANDles an OUT request.  Depending on the state of the
 0055           ;               enumeration sequence it decides what to do next
 0055           ;
 0055           ;-----------------------------------------------------------------------------
 0055            USBUART_EP0_OUT:
 0055           _USBUART_EP0_OUT:
 0055 510B          MOV     A, [USBUART_TransferType]
 0057 E001          JACC    USBUART_ControlOutDispatchTable
 0059           USBUART_ControlOutDispatchTable:
 0059 821F          JMP     USBUART_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
 005B 802D          JMP     USBUART_ControlReadStatusStage   ; USB_TRANS_STATE_CONTROL_READ
 005D 805E          JMP     USBUART_ControlWriteDataStage    ; USB_TRANS_STATE_CONTROL_WRITE
 005F 80C6          JMP     USBUART_NoDataControlError       ; USB_TRANS_STATE_NO_DATA_CONTROL
 0061           
 0061           
 0061           ;-----------------------------------------------------------------------------
 0061           ;  FUNCTION NAME: USBUART_InitControlRead
 0061           ;
 0061           ;  DESCRIPTION:   This routine initializes a control read.  It must be JUMPed to,
 0061           ;                 not called.  It assumes a transfer descriptor has been loaded
 0061           ;                 into the driver USBUART_CurrentTD data structure.
 0061           ;
 0061           ;-----------------------------------------------------------------------------
 0061            USBUART_InitControlRead:
 0061           _USBUART_InitControlRead:
 0061 530A          MOV     [USBUART_LastSize], A      ; Save the packet size?
 0063 91B9          CALL    USBUART_InitializeStatusBlock
 0065 550B02        MOV     [USBUART_TransferType], USB_TRANS_STATE_CONTROL_READ
 0068           
 0068               ; Check the transfer size against the request size
 0068 5D5F          MOV    A, REG[USBUART_EP0DATA+wLengthHi] ; MSB of wLength
 006A 3A15          CMP    A, [USBUART_TransferSize]
 006C B007          JNZ    .L1
 006E           
 006E 5D5E          MOV    A, REG[USBUART_EP0DATA+wLengthLo] ; LSB of wLength
 0070 3A16          CMP    A, [USBUART_TransferSize+1]
 0072 A009          JZ     .L9
 0074           .L1:
 0074 D007          JNC    .L9
 0076           ;
 0076 5316          MOV    [USBUART_TransferSize+1], A ;
 0078 5D5F          MOV    A, REG[USBUART_EP0DATA+wLengthHi] ;
 007A 5315          MOV    [USBUART_TransferSize], A   ;
 007C           .L9:
 007C 551B00        MOV    [USBUART_TransferByteCount], 0 ;
 007F 551C00        MOV    [USBUART_TransferByteCount+1], 0 ;
 0082           
 0082 2E1D01        OR     [USBUART_EP0DataToggle], 1 ; setup EP0 data toggle
 0085 80AA          JMP    USBUART_LoadEndpoint        ;
 0087           ;-----------------------------------------------------------------------------
 0087           ;  FUNCTION NAME: USBUART_ControlReadDataStage
 0087           ;
 0087           ;  DESCRIPTION:   This routine processes the data stage of a control read.  It
 0087           ;                 must be JUMPed to, not called.  It assumes a transfer descriptor
 0087           ;                 has been loaded into the driver USBUART_CurrentTD
 0087           ;                 data structure.
 0087           ;
 0087           ;-----------------------------------------------------------------------------
 0087            USBUART_ControlReadDataStage:
 0087 80A8          JMP     USBUART_LoadEndpoint
 0089           
 0089           ;-----------------------------------------------------------------------------
 0089           ;  FUNCTION NAME: USBUART_ControlReadStatusStage
 0089           ;
 0089           ;  DESCRIPTION:   This routine processes the status stage of a control read.  It
 0089           ;                 must be JUMPed to, not called.  It handles short or 0 packet
 0089           ;                 It assumes a transfer descriptor has been loaded into the
 0089           ;                 driver USBUART_CurrentTD data structure.
 0089           ;
 0089           ;-----------------------------------------------------------------------------
 0089            USBUART_ControlReadStatusStage:
 0089 510A          MOV    A, [USBUART_LastSize]       ; Get the number of bytes from the last transfer
 008B 041C          ADD    [USBUART_TransferByteCount + 1], A ; Update the transfer byte count
 008D 0E1B00        ADC    [USBUART_TransferByteCount], 0 ;
 0090 5001          MOV    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
 0092 9174          CALL   USBUART_UpdateStatusBlock
 0094 550B00        MOV    [USBUART_TransferType], USB_TRANS_STATE_IDLE
 0097 5000          MOV    A, 0                        ; Count Register
 0099 5703          MOV    X, USB_MODE_STALL_IN_OUT
 009B 8F7F          JMP    USBUART_EP0_UPD_MODE_EXIT
 009D           ;-----------------------------------------------------------------------------
 009D           ;  FUNCTION NAME: USBUART_NoDataStageControlTransfer
 009D           ;                 USBUART_InitNoDataStageControlTransfer
 009D           ;
 009D           ;  DESCRIPTION:   This routine processes the status stage of a no data control
 009D           ;                 write.  It must be JUMPed to, not called.
 009D           ;
 009D           ;-----------------------------------------------------------------------------
 009D            USBUART_NoDataStageControlTransfer:
 009D           _USBUART_InitNoDataStageControlTransfer:
 009D            USBUART_InitNoDataStageControlTransfer:
 009D 917F          CALL    USBUART_InitializeStatusBlock
 009F           
 009F 550B06        MOV    [USBUART_TransferType], USB_TRANS_STATE_NO_DATA_CONTROL
 00A2           
 00A2 5000          MOV    A, 0                        ; Count Register
 00A4 5706          MOV    X, USB_MODE_STATUS_IN_ONLY
 00A6 8F74          JMP    USBUART_EP0_UPD_MODE_EXIT
 00A8           
 00A8           
 00A8           ;-----------------------------------------------------------------------------
 00A8           ;  FUNCTION NAME: USBUART_InitControlWrite
 00A8           ;
 00A8           ;  DESCRIPTION:   This routine initializes control write.  It must be JUMPed
 00A8           ;                 to, not called.  It assumes a transfer descriptor has been loaded
 00A8           ;                 into the driver USBUART_CurrentTD data structure.
 00A8           ;
 00A8           ;-----------------------------------------------------------------------------
 00A8            USBUART_InitControlWrite:
 00A8           _USBUART_InitControlWrite:
 00A8 5114          MOV     A, [USBUART_DataSource]    ; Need to make sure the destination is not ROM
 00AA 3900          CMP     A, USB_DS_ROM
 00AC A1CC          JZ      USBUART_Not_Supported_Local_Drv
 00AE           
 00AE 916E          CALL    USBUART_InitializeStatusBlock
 00B0           
 00B0 550B04        MOV    [USBUART_TransferType], USB_TRANS_STATE_CONTROL_WRITE
 00B3           
 00B3 2E1D01        OR     [USBUART_EP0DataToggle], 1 ; setup EP0 data toggle
 00B6           
 00B6 5000          MOV    A, 0                        ; Count Register
 00B8 570B          MOV    X, USB_MODE_ACK_OUT_STATUS_IN
 00BA 8F60          JMP    USBUART_EP0_UPD_MODE_EXIT
 00BC           
 00BC           
 00BC           ;-----------------------------------------------------------------------------
 00BC           ;  FUNCTION NAME: USBUART_ControlWriteDataStage
 00BC           ;
 00BC           ;  DESCRIPTION:   This routine processes the data stage of a control
 00BC           ;                 write.  It must be JUMPed to, not called.  It assumes a
 00BC           ;                 transfer descriptor has been loaded into the driver
 00BC           ;                 USBUART_CurrentTD data structure.
 00BC           ;
 00BC           ;-----------------------------------------------------------------------------
 00BC            USBUART_ControlWriteDataStage:
 00BC 361D01        XOR    [USBUART_EP0DataToggle], 1  ; Update data toggle
 00BF           
 00BF 5D57          MOV    A,REG[USBUART_EP0CNT]       ; Get the count
 00C1           
 00C1 210F          AND     A, 0x0F
 00C3 1102          SUB     A, 2                       ; Count include the two byte checksum
 00C5           
 00C5 5323          MOV     [USBUART_t2], A            ; Assume we have room to receive the whole packet
 00C7           
 00C7 5000          MOV     A, 0
 00C9 3A15          CMP     A, [USBUART_TransferSize]  ; If the MSB has anything just use the count
 00CB B007          JNZ     .L1
 00CD           
 00CD 5123          MOV     A, [USBUART_t2]
 00CF 3A16          CMP     A, [USBUART_TransferSize+1]  ;
 00D1 A006          JZ      .L6
 00D3           .L1:
 00D3 C004          JC      .L6
 00D5 5F2316        MOV     [USBUART_t2], [USBUART_TransferSize+1]
 00D8           
 00D8           .L6:
 00D8 5123          MOV     A, [USBUART_t2]
 00DA 1416          SUB     [USBUART_TransferSize+1],A   ; Update the bytes remaining
 00DC 1E1500        SBB     [USBUART_TransferSize], 0  ;
 00DF           
 00DF 041C          ADD     [USBUART_TransferByteCount + 1], A ; Update the transfer byte count
 00E1 0E1B00        ADC     [USBUART_TransferByteCount], 0 ;
 00E4           
 00E4 5700          MOV     X,0                        ; Start the index at 0
 00E6           
 00E6           .RAM_COPY:
 00E6 5E58          MOV     A, REG[X+USBUART_EP0DATA]  ; Get the data
 00E8 3F18          MVI     [USBUART_DataPtr+1], A     ; Store the data, bump the destination
 00EA           
 00EA 75            INC     X                          ; Bump the destination offset
 00EB 5B            MOV     A,X                        ; Are we done?
 00EC 3A23          CMP     A, [USBUART_t2]
 00EE CFF7          JC      .RAM_COPY                  ; Not done
 00F0           
 00F0 5000          MOV    A, 0                        ; Count Register
 00F2 570B          MOV    X, USB_MODE_ACK_OUT_STATUS_IN
 00F4 8F26          JMP    USBUART_EP0_UPD_MODE_EXIT
 00F6           
 00F6           ; Jump here on data toggle error
 00F6           .error:
 00F6 550B00        MOV    [USBUART_TransferType], USB_TRANS_STATE_IDLE  ; This simply aborts the transfer
 00F9 5000          MOV    A, 0                        ; Count Register
 00FB 5703          MOV    X, USB_MODE_STALL_IN_OUT
 00FD 8F1D          JMP    USBUART_EP0_UPD_MODE_EXIT
 00FF           
 00FF           
 00FF           ;-----------------------------------------------------------------------------
 00FF           ;  FUNCTION NAME: USBUART_ControlWriteStatusStage
 00FF           ;
 00FF           ;  DESCRIPTION:   This routine processes the status stage of a control
 00FF           ;                 write.  It must be JUMPed to, not called.  It assumes a
 00FF           ;                 transfer descriptor has been loaded into the driver
 00FF           ;                 USBUART_CurrentTD data structure.
 00FF           ;
 00FF           ;-----------------------------------------------------------------------------
 00FF            USBUART_ControlWriteStatusStage:
 00FF 5001          MOV    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
 0101 9105          CALL   USBUART_UpdateStatusBlock
 0103 550B00        MOV    [USBUART_TransferType], USB_TRANS_STATE_IDLE  ; The packet is done
 0106 5000          MOV    A, 0                        ; Count Register
 0108 5703          MOV    X, USB_MODE_STALL_IN_OUT
 010A 8F10          JMP    USBUART_EP0_UPD_MODE_EXIT
 010C           
 010C           
 010C           ;-----------------------------------------------------------------------------
 010C           ;  FUNCTION NAME: USBUART_NoDataControlStatusStage
 010C           ;
 010C           ;  DESCRIPTION:   This routine processes the status stage of a control
 010C           ;                 write.  It must be JUMPed to, not called.  It assumes a
 010C           ;                 transfer descriptor has been loaded into the driver
 010C           ;                 USBUART_CurrentTD data structure.
 010C           ;
 010C           ;                 USB Device Addressing happens here because we can't change
 010C           ;                 the SIE Address before the Status IN is received.
 010C           ;
 010C           ;-----------------------------------------------------------------------------
 010C            USBUART_NoDataControlStatusStage:
 010C 5001          MOV     A, USB_XFER_STATUS_ACK     ; Return a Status ACK Completion
 010E 90F8          CALL    USBUART_UpdateStatusBlock
 0110               ; Dispatch to the proper handler
 0110 3C2201        CMP     [USBUART_fDataPending], USB_ADDRESS_CHANGE_PENDING
 0113 B009          JNZ     .L1
 0115           
 0115               ; USB ADDRESS CHANGE
 0115 510C          MOV     A, [USBUART_TransferBuffer]  ; Get the pending data
 0117           
 0117 2980          OR      A, USB_ADDR_ENABLE         ; Set the enable bit
 0119 604A          MOV     REG[USBUART_ADDR], A       ; Update the SIE address
 011B 8001          JMP     .EXIT
 011D           .L1:
 011D           
 011D           .EXIT:
 011D 552200        MOV     [USBUART_fDataPending], 0  ; Clear data pending
 0120           
 0120 5000          MOV    A, 0                        ; Count Register
 0122 5706          MOV    X, USB_MODE_STATUS_IN_ONLY  ; Wait for the next SETUP
 0124 8EF6          JMP    USBUART_EP0_UPD_MODE_EXIT
 0126           
 0126           
 0126           ;-----------------------------------------------------------------------------
 0126           ;  FUNCTION NAME: USBUART_NoDataControlError
 0126           ;
 0126           ;  DESCRIPTION:   This routine handles the condition when we expected a
 0126           ;                 status IN, but receive an OUT
 0126           ;
 0126           ;-----------------------------------------------------------------------------
 0126            USBUART_NoDataControlError:
 0126 5003          MOV    A, USB_XFER_ERROR           ; Return Transaction Error
 0128 90DE          CALL   USBUART_UpdateStatusBlock
 012A 5000          MOV    A, 0                        ; Count Register
 012C 5703          MOV    X, USB_MODE_STALL_IN_OUT    ; Set the mode register
 012E 8EEC          JMP    USBUART_EP0_UPD_MODE_EXIT
 0130           
 0130           
 0130           ;-----------------------------------------------------------------------------
 0130           ;  FUNCTION NAME: USBUART_LoadEndpoint
 0130           ;
 0130           ;  DESCRIPTION: Moves data from either RAM OR ROM - depending on the request
 0130           ;               type AND then places the appropriate number of bytes -
 0130           ;               depending on the request size into the endpoint FIFO.
 0130           ;               It finally sets up the endpoint to send data.
 0130           ;
 0130           USBUART_LoadEndpoint:
 0130 510A          MOV     A, [USBUART_LastSize]      ; Get the number of bytes from the last transfer
 0132 041C          ADD     [USBUART_TransferByteCount + 1], A ; Update the transfer byte count
 0134 0E1B00        ADC     [USBUART_TransferByteCount], 0 ;
 0137 5115          MOV     A,  [USBUART_TransferSize] ; Check to see if we have any
 0139 2A16          OR      A,  [USBUART_TransferSize+1] ;  more data to send
 013B B00E          JNZ     .cont                      ; Jump if we have to send more data
 013D           
 013D           ; Flow here if there is no more data to send
 013D 3C0A08        CMP     [USBUART_LastSize], 8      ; Was it a full packet?
 0140 A047          JZ      .START_TRANSFER            ; Jump if it was full (need to send a zero length)
 0142           
 0142           ; Flow here if we are entering the status stage
 0142 5000          MOV    A, 0                        ; Count Register
 0144 530A          MOV    [USBUART_LastSize], A       ; Clear the byte count
 0146 5702          MOV    X, USB_MODE_STATUS_OUT_ONLY ; Only ACK the Status Out
 0148 8ED2          JMP    USBUART_EP0_UPD_MODE_EXIT
 014A           
 014A           ; Jump here to determine how many bytes should we transfer
 014A           .cont:
 014A 3C1500        CMP     [USBUART_TransferSize], 0  ; Check the MSB
 014D B00A          JNZ     .L1
 014F           
 014F 3C1608        CMP     [USBUART_TransferSize+1], 8  ; Check the LSB
 0152 D005          JNC     .L1
 0154           
 0154 5116          MOV     A,[USBUART_TransferSize+1]   ; Transfer all the remaining data
 0156 8003          JMP     .L3
 0158           
 0158           .L1:
 0158 5008          MOV     A, 8                       ; Just transfer the next 8 bytes
 015A           
 015A           .L3:
 015A           
 015A 1416          SUB     [USBUART_TransferSize+1],A   ; Update the bytes remaining
 015C 1E1500        SBB     [USBUART_TransferSize],0
 015F           
 015F 5323          MOV     [USBUART_t2],A             ; Save the count
 0161 5700          MOV     X,0
 0163           
 0163 3C1400        CMP     [USBUART_DataSource],USB_DS_ROM  ; RAM or ROM copy?
 0166 B017          JNZ     .RAM_COPY
 0168           
 0168           ; Copy data from a ROM source
 0168           .ROM_COPY:
 0168 10            PUSH    X                          ; Save the destination offset
 0169 5117          MOV     A,[USBUART_DataPtr]        ; Get the transfer source MSB
 016B 5818          MOV     X,[USBUART_DataPtr+1]      ; Set the transfer source LSB
 016D 7618          INC     [USBUART_DataPtr+1]        ; Increment the data pointer
 016F 0E1700        ADC     [USBUART_DataPtr], 0       ;   MSB if necessary
 0172           
 0172 28            ROMX                               ; Get the data byte
 0173           
 0173 20            POP     X                          ; Get the destination offset
 0174 6158          MOV     REG[X + USBUART_EP0DATA], A; Load the data
 0176 75            INC     X                          ; Bump the destination offset
 0177 5B            MOV     A,X                        ; Are we done?
 0178 3A23          CMP     A, [USBUART_t2]
 017A CFED          JC      .ROM_COPY                  ; Not done
 017C 800B          JMP     .START_TRANSFER            ; Otherwise go start the transfer
 017E           
 017E           ; Copy data from a RAM source
 017E           .RAM_COPY:
 017E 3E18          MVI     A, [USBUART_DataPtr+1]     ; Get the data, bump the source
 0180           
 0180 6158          MOV     REG[X +USBUART_EP0DATA], A ; Load the data
 0182 75            INC     X                          ; Bump the destination offset
 0183 5B            MOV     A,X                        ; Are we done?
 0184 3A23          CMP     A, [USBUART_t2]
 0186 CFF7          JC      .RAM_COPY                  ; Not done
 0188           
 0188           ;; Set up the IN transfer count/mode/etc
 0188           ;    A contains the byte count
 0188           .START_TRANSFER:
 0188 530A          MOV     [USBUART_LastSize], A      ; Save the packet size
 018A           
 018A 5001          MOV     A, 1
 018C 221D          AND     A, [USBUART_EP0DataToggle]
 018E A003          JZ      .BYPASS_T1
 0190 5080          MOV     A, USB_CNT_TOGGLE          ; Or T1 in the data toggle
 0192           
 0192           .BYPASS_T1:
 0192 2A0A          OR      A, [USBUART_LastSize]
 0194 361D01        XOR     [USBUART_EP0DataToggle], 1    ; Update the data toggle for next time
 0197           
 0197 570F          MOV    X, USB_MODE_ACK_IN_STATUS_OUT  ; Set the mode register
 0199 8E81          JMP    USBUART_EP0_UPD_MODE_EXIT
 019B           
 019B           
 019B           ;-----------------------------------------------------------------------------
 019B           ;  FUNCTION NAME: USBUART_GetTableEntry
 019B           ;
 019B           ;  DESCRIPTION: This function figures out based on the various bytes in the
 019B           ;               setup packet where to get the data from or put the data to.
 019B           ;               Transfer Data structures are defined each of the supported
 019B           ;               control transfers, this function finds the right one and
 019B           ;               saves it in the CurrentTD structure in RAM.  It then
 019B           ;               calls InitControlRead or InitControlWrite to being the
 019B           ;               transaction.
 019B           ;
 019B           ;-----------------------------------------------------------------------------
                EXPORT USBUART_GetTableEntry
 019B           USBUART_GetTableEntry:
 019B           
 019B 75            INC     X                          ; Point to the first table entry
 019C 0900          ADC     A, 0                       ;
 019E           
 019E 08            PUSH    A                          ; Save a work register
 019F 6523          ASL     [USBUART_t2]                       ; Index * 2
 01A1 6523          ASL     [USBUART_t2]                       ; Index * 4
 01A3 6523          ASL     [USBUART_t2]                       ; Index * 8
 01A5 18            POP     A                          ; Restore the work register
 01A6           
 01A6 4B            SWAP    A, X
 01A7 0223          ADD     A, [USBUART_t2]
 01A9 4B            SWAP    A, X
 01AA 0900          ADC     A, 0                       ; A:X now points to the descriptor table entry we want
 01AC           
 01AC           ; Flow here to load the Transfer Descriptor (TD_ENTRY)
 01AC 552314        MOV     [USBUART_t2], USBUART_CurrentTD  ; Use Temp as MVI pointer
 01AF 9026          CALL     USBUART_GETBYTE           ; Get the descriptor data source
 01B1 901C          CALL     USBUART_GETWORD           ; Get the descriptor size
 01B3 901A          CALL     USBUART_GETWORD           ; Get the descriptor address
 01B5 9018          CALL     USBUART_GETWORD           ; Get the Status Pointer
 01B7           ; Dispatch to InitControlRead or InitControlWrite based on d2h/h2d in the request
 01B7 5D58          MOV    A, REG[USBUART_EP0DATA+bmRequestType] ; Get bmRequestType
 01B9 2180          AND     A,0x80                          ; Control Read or Write
 01BB A003          JZ      .control_write
 01BD           
 01BD 8EA3          JMP     USBUART_InitControlRead
 01BF           
 01BF           .control_write:
 01BF 8EE8          JMP     USBUART_InitControlWrite
 01C1           
 01C1           
 01C1           ;-----------------------------------------------------------------------------
 01C1           ;  FUNCTION NAME: USBUART_LOOKUP
 01C1           ;
 01C1           ;  DESCRIPTION:    Returns the address of an entry in a lookup table (LT_ENTRY)
 01C1           ;
 01C1           ;-----------------------------------------------------------------------------
 01C1           ;
 01C1           ;  ARGUMENTS:    A:X Point to the lookup table
 01C1           ;                USBUART_t2 contain the table index
 01C1           ;
 01C1           ;  RETURNS:      Address of the LT_ENTRY in A:X
 01C1           ;
 01C1           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01C1           ;
 01C1           ;  THEORY of OPERATION or PROCEDURE:
 01C1           ;
 01C1           ;-----------------------------------------------------------------------------
                EXPORT USBUART_LOOKUP
 01C1           USBUART_LOOKUP:
 01C1 75            INC     X                          ; Point to the first table entry
 01C2 0900          ADC     A, 0                       ;
 01C4           
 01C4 6523          ASL     [USBUART_t2]                       ; Simply shift (mult by 2)
 01C6 6523          ASL     [USBUART_t2]                       ;              (mult by 4)
 01C8 4B            SWAP    A, X
 01C9 0223          ADD     A, [USBUART_t2]            ;
 01CB 4B            SWAP    A, X
 01CC 0900          ADC     A, 0
 01CE 7F            RET
 01CF           
 01CF           
 01CF           ;-----------------------------------------------------------------------------
 01CF           ;  FUNCTION NAME: USBUART_GETWORD/USBUART_GETBYTE
 01CF           ;
 01CF           ;  DESCRIPTION:    Get a word value from ROM
 01CF           ;
 01CF           ;-----------------------------------------------------------------------------
 01CF           ;
 01CF           ;  ARGUMENTS:    A:X is the ROM Address
 01CF           ;                USBUART_t2 is the destination address
 01CF           ;
 01CF           ;  RETURNS:      USBUART_t1
 01CF           ;
 01CF           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01CF           ;                USES USBUART_t2
 01CF           ;                A:X points to the subsequent ROM location
 01CF           ;  THEORY of OPERATION or PROCEDURE:
 01CF           ;
 01CF           ;-----------------------------------------------------------------------------
                EXPORT USBUART_GETWORD
 01CF           USBUART_GETWORD:
 01CF           
 01CF 08            PUSH    A                          ; Don't loose the pointer MSB
 01D0 28            ROMX                               ; Data source flag
 01D1 3F23          MVI     [USBUART_t2], A            ; Save the data source
 01D3 18            POP     A                          ; Get the MSB back
 01D4 75            INC     X                          ; Point to the next  entry
 01D5 0900          ADC     A, 0                       ;
 01D7           
                EXPORT USBUART_GETBYTE
 01D7           USBUART_GETBYTE:
 01D7           
 01D7 08            PUSH    A                          ; Don't loose the pointer MSB
 01D8 28            ROMX                               ; Data source flag
 01D9 3F23          MVI     [USBUART_t2], A            ; Save the data source
 01DB 18            POP     A                          ; Get the MSB back
 01DC 75            INC     X                          ; Point to the next  entry
 01DD 0900          ADC     A, 0                       ;
 01DF 7F            RET
 01E0           
 01E0           
 01E0           ;-----------------------------------------------------------------------------
 01E0           ;  FUNCTION NAME: USBUART_GET_DEVICE_TABLE_ENTRY
 01E0           ;
 01E0           ;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
 01E0           ;                  Not intended for use by C functions
 01E0           ;
 01E0           ;-----------------------------------------------------------------------------
 01E0           ;
 01E0           ;  ARGUMENTS:
 01E0           ;
 01E0           ;  RETURNS:        A:X points the current DEVICE_TABLE entry
 01E0           ;                  Carry flag is set if the current device index is out of range
 01E0           ;
 01E0           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01E0           ;
 01E0           ;  THEORY of OPERATION or PROCEDURE:
 01E0           ;
 01E0           ;-----------------------------------------------------------------------------
                EXPORT USBUART_GET_DEVICE_TABLE_ENTRY
 01E0           USBUART_GET_DEVICE_TABLE_ENTRY:
 01E0 5F2300        MOV     [USBUART_t2], [USBUART_bCurrentDevice]  ; Use the UM temp var--Selector
 01E3           
 01E3 5000          MOV     A,>USBUART_DEVICE_LOOKUP   ; Get the ROM Address MSB
 01E5 5700          MOV     X,<USBUART_DEVICE_LOOKUP   ; Get the ROM Address LSB
 01E7 28            ROMX                               ; First entry is the table size (only a byte)
 01E8 3A23          CMP     A, [USBUART_t2]            ; Range check
 01EA 5000          MOV     A,>USBUART_DEVICE_LOOKUP   ; Get the ROM Address MSB
 01EC C003          JC      .exit
 01EE           ; Flow here if the index is valid
 01EE 9FD1          CALL    USBUART_LOOKUP             ; Look up the configuration
 01F0           ; Jump or flow here on exit
 01F0           .exit:
 01F0 7F            RET
 01F1           
 01F1           
 01F1           ;-----------------------------------------------------------------------------
 01F1           ;  FUNCTION NAME: USBUART_GET_CONFIG_TABLE_ENTRY
 01F1           ;
 01F1           ;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
 01F1           ;                  Not intended for use by C functions
 01F1           ;                  Does not do range checking on
 01F1           ;
 01F1           ;-----------------------------------------------------------------------------
 01F1           ;
 01F1           ;  ARGUMENTS:
 01F1           ;
 01F1           ;  RETURNS:        A:X points the current CONFIG_TABLE entry
 01F1           ;                  Carry flag is set if the current device index is out of range
 01F1           ;
 01F1           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01F1           ;
 01F1           ;  THEORY of OPERATION or PROCEDURE:
 01F1           ;
 01F1           ;-----------------------------------------------------------------------------
                EXPORT USBUART_GET_CONFIG_TABLE_ENTRY
 01F1           USBUART_GET_CONFIG_TABLE_ENTRY:
 01F1 9FED          CALL    USBUART_GET_DEVICE_TABLE_ENTRY  ; Get the selected device
 01F3 552324        MOV     [USBUART_t2],USBUART_t1    ; Set the GETWORD destination
 01F6 9FD7          CALL    USBUART_GETWORD            ; Get the pointer to the CONFIG_LOOKUP table
 01F8                                                  ; ITempW has the address
 01F8 5D5A          MOV     A, REG[USBUART_EP0DATA+wValueLo]  ; Get the configuration number
 01FA 5323          MOV     [USBUART_t2],A             ; Save it
 01FC 5124          MOV     A, [USBUART_t1]            ; Get the CONFIG_LOOKUP ROM Address MSB
 01FE 5825          MOV     X, [USBUART_t1+1]          ; Get the CONFIG_LOOKUP ROM Address LSB
 0200           
 0200           ; A:X Points to the CONFIG_LOOKUP, so get the current entry
 0200 5F2301        MOV     [USBUART_t2], [USBUART_Configuration] ; Get the configuration number
 0203 7A23          DEC     [USBUART_t2]               ; We don't populate the 0th entry
 0205 9FBA          CALL    USBUART_LOOKUP             ; Look up the configuration
 0207 7F            RET
 0208           
 0208           
 0208           ;-----------------------------------------------------------------------------
 0208           ;  FUNCTION NAME: USBUART_UpdateStatusBlock
 0208           ;
 0208           ;  DESCRIPTION:    Update the Completion Status Block for a Request.  The
 0208           ;                  block is updated with the completion code from the
 0208           ;                  argument (A) and the _TransferByteCount.
 0208           ;
 0208           ;                  The StatusBlock Pointer (_StatusBlockPtr) is set to NULL (0)
 0208           ;                  to make sure no other updates are made to the StatusBlock by
 0208           ;                  the USB User Module.
 0208           ;
 0208           ;-----------------------------------------------------------------------------
 0208           ;
 0208           ;  ARGUMENTS:      A contains the Completion Status Code
 0208           ;
 0208           ;  RETURNS:        None
 0208           ;
 0208           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0208           ;
 0208           ;  THEORY of OPERATION or PROCEDURE:
 0208           ;
 0208           ;-----------------------------------------------------------------------------
 0208           USBUART_UpdateStatusBlock:
 0208 581A          MOV     X, [USBUART_StatusBlockPtr + 1] ;
 020A 4B            SWAP    A, X                       ; Don't loose the completion code
 020B 3900          CMP     A, 0                       ; NULL?
 020D A00F          JZ      .done                      ; No update on NULL
 020F           ; Flow here to update the VSR Completion Status Block
 020F 4B            SWAP    A, X                       ; Completion code A, Pointer in X
 0210 5400          MOV     [X + 0], A                 ; Update the completion Code
 0212 511B          MOV     A, [USBUART_TransferByteCount] ; Actual Byte Count MSB
 0214 5401          MOV     [X + 1], A
 0216 511C          MOV     A, [USBUART_TransferByteCount + 1] ; Actual Byte Count LSB
 0218 5402          MOV     [X + 2], A
 021A 551A00        MOV     [USBUART_StatusBlockPtr + 1], 0 ; Clear the Block Pointer
 021D           .done:
 021D 7F            RET                                ; All done
 021E           
 021E           
 021E           ;-----------------------------------------------------------------------------
 021E           ;  FUNCTION NAME: USBUART_InitializeStatusBlock
 021E           ;
 021E           ;  DESCRIPTION:    Initialize the Completion Status Block for a Request.
 021E           ;                  The completion code is set to USB_XFER_IDLE.
 021E           ;
 021E           ;-----------------------------------------------------------------------------
 021E           ;
 021E           ;  ARGUMENTS:      None
 021E           ;
 021E           ;  RETURNS:        None
 021E           ;
 021E           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 021E           ;
 021E           ;  THEORY of OPERATION or PROCEDURE:
 021E           ;
 021E           ;-----------------------------------------------------------------------------
 021E           USBUART_InitializeStatusBlock:
 021E 511A          MOV     A, [USBUART_StatusBlockPtr + 1] ;
 0220 3900          CMP     A, 0                       ; NULL?
 0222 A00B          JZ      .done                      ; No update on NULL
 0224           ; Flow here to initialize the Completion Status Block
 0224 4B            SWAP    A, X                       ; Pointer in X
 0225 560000        MOV     [X + 0], USB_XFER_IDLE     ; Initialize the completion code (0)
 0228 551B00        MOV     [USBUART_TransferByteCount], 0 ; Clear the byte count
 022B 551C00        MOV     [USBUART_TransferByteCount + 1], 0 ;
 022E           .done:
 022E 7F            RET                                ; All done
 022F           
 022F           
 022F           ;-----------------------------------------------------------------------------
 022F           ;  FUNCTION NAME: ;  USB 1st Tier Dispatch Jump Table (based on bmRequestType)
 022F           ;
 022F           ;  DESCRIPTION:
 022F           ;
 022F           ;-----------------------------------------------------------------------------
 022F           ;
 022F           ;  ARGUMENTS:
 022F           ;
 022F           ;  RETURNS:
 022F           ;
 022F           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 022F           ;
 022F           ;  THEORY of OPERATION or PROCEDURE:
 022F           ;
 022F           ;-----------------------------------------------------------------------------
 022F           MACRO BMREQUEST_DISPATCH
 022F           IF (USB_CB_@0_@1_@2 & 1)
 022F               JMP     USBUART_DT_@0_@1_@2_Dispatch
 022F           ELSE
 022F               JMP     USBUART_Not_Supported_Local_Drv
 022F           ENDIF
 022F           USBUART_DT_bmRequestType::
                IF (USB_CB_h2d_std_dev & 1)
 022F 8000          JMP     USBUART_DT_h2d_std_dev_Dispatch
                ELSE
                    JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_std_ifc & 1)
 0231 8000          JMP     USBUART_DT_h2d_std_ifc_Dispatch
                ELSE
                    JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_std_ep & 1)
 0233 8000          JMP     USBUART_DT_h2d_std_ep_Dispatch
                ELSE
                    JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_std_oth & 1)
                    JMP     USBUART_DT_h2d_std_oth_Dispatch
                ELSE
 0235 8043          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_dev & 1)
                    JMP     USBUART_DT_h2d_cls_dev_Dispatch
                ELSE
 0237 8041          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_ifc & 1)
 0239 8000          JMP     USBUART_DT_h2d_cls_ifc_Dispatch
                ELSE
                    JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_ep & 1)
                    JMP     USBUART_DT_h2d_cls_ep_Dispatch
                ELSE
 023B 803D          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_oth & 1)
                    JMP     USBUART_DT_h2d_cls_oth_Dispatch
                ELSE
 023D 803B          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_dev & 1)
                    JMP     USBUART_DT_h2d_vnd_dev_Dispatch
                ELSE
 023F 8039          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_ifc & 1)
                    JMP     USBUART_DT_h2d_vnd_ifc_Dispatch
                ELSE
 0241 8037          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_ep & 1)
                    JMP     USBUART_DT_h2d_vnd_ep_Dispatch
                ELSE
 0243 8035          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_oth & 1)
                    JMP     USBUART_DT_h2d_vnd_oth_Dispatch
                ELSE
 0245 8033          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_dev & 1)
                    JMP     USBUART_DT_h2d_rsv_dev_Dispatch
                ELSE
 0247 8031          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_ifc & 1)
                    JMP     USBUART_DT_h2d_rsv_ifc_Dispatch
                ELSE
 0249 802F          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_ep & 1)
                    JMP     USBUART_DT_h2d_rsv_ep_Dispatch
                ELSE
 024B 802D          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_oth & 1)
                    JMP     USBUART_DT_h2d_rsv_oth_Dispatch
                ELSE
 024D 802B          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_dev & 1)
 024F 8000          JMP     USBUART_DT_d2h_std_dev_Dispatch
                ELSE
                    JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_ifc & 1)
 0251 8000          JMP     USBUART_DT_d2h_std_ifc_Dispatch
                ELSE
                    JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_ep & 1)
 0253 8000          JMP     USBUART_DT_d2h_std_ep_Dispatch
                ELSE
                    JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_oth & 1)
                    JMP     USBUART_DT_d2h_std_oth_Dispatch
                ELSE
 0255 8023          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_dev & 1)
                    JMP     USBUART_DT_d2h_cls_dev_Dispatch
                ELSE
 0257 8021          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_ifc & 1)
 0259 8000          JMP     USBUART_DT_d2h_cls_ifc_Dispatch
                ELSE
                    JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_ep & 1)
                    JMP     USBUART_DT_d2h_cls_ep_Dispatch
                ELSE
 025B 801D          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_oth & 1)
                    JMP     USBUART_DT_d2h_cls_oth_Dispatch
                ELSE
 025D 801B          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_dev & 1)
                    JMP     USBUART_DT_d2h_vnd_dev_Dispatch
                ELSE
 025F 8019          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_ifc & 1)
                    JMP     USBUART_DT_d2h_vnd_ifc_Dispatch
                ELSE
 0261 8017          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_ep & 1)
                    JMP     USBUART_DT_d2h_vnd_ep_Dispatch
                ELSE
 0263 8015          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_oth & 1)
                    JMP     USBUART_DT_d2h_vnd_oth_Dispatch
                ELSE
 0265 8013          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_dev & 1)
                    JMP     USBUART_DT_d2h_rsv_dev_Dispatch
                ELSE
 0267 8011          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_ifc & 1)
                    JMP     USBUART_DT_d2h_rsv_ifc_Dispatch
                ELSE
 0269 800F          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_ep & 1)
                    JMP     USBUART_DT_d2h_rsv_ep_Dispatch
                ELSE
 026B 800D          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_oth & 1)
                    JMP     USBUART_DT_d2h_rsv_oth_Dispatch
                ELSE
 026D 800B          JMP     USBUART_Not_Supported_Local_Drv
                ENDIF
 026F           USBUART_DT_End:
 0020           USBUART_DT_Size: equ (USBUART_DT_End-USBUART_DT_bmRequestType) / 2
 026F           USBUART_bmRequestType_Dispatch::
 026F 3920          CMP   A,USBUART_DT_Size
 0271 D004          JNC   .dispatch_not_supported
 0273 64            ASL   A
 0274 EFBA          JACC  USBUART_DT_bmRequestType
 0276           .dispatch_not_supported:
 0276 7D0279        LJMP  USBUART_Not_Supported_Local_Drv    
 0279           
 0279           USBUART_Not_Supported_Local_Drv:
 0279 7D0000            LJMP     USBUART_Not_Supported
 027C           
 027C           
 027C           ;-----------------------------------------------
 027C           ; Add custom application code for routines
 027C           ;-----------------------------------------------
 027C           
 027C              ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
 027C              ;---------------------------------------------------
 027C              ; Insert your custom code below this banner
 027C              ;---------------------------------------------------
 027C           
 027C              ;---------------------------------------------------
 027C              ; Insert your custom code above this banner
 027C              ;---------------------------------------------------
 027C              ;@PSoC_UserCode_END@ (Do not change this line.)
 027C           
 027C           ; End of File USBUART_drv.asm
