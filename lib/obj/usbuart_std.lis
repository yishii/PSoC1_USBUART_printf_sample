 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: USBUART_std.asm
 0000           ;;  Version: 1.0, Updated on 2006/10/20 at 16:08:45
 0000           ;;  Generated by PSoC Designer ver 4.3  b1884 : 23 June, 2006
 0000           ;;
 0000           ;;  DESCRIPTION: USB Device User Module software implementation file
 0000           ;;               for the CY8C24090 and CY7C64215 family of devices.
 0000           ;;
 0000           ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
 0000           ;;        arguments and observe the associated "Registers are volatile" policy.
 0000           ;;        This means it is the caller's responsibility to preserve any values
 0000           ;;        in the X and A registers that are still needed after the API functions
 0000           ;;        returns. For Large Memory Model devices it is also the caller's 
 0000           ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
 0000           ;;        MVW_PP registers. Even though some of these registers may not be modified
 0000           ;;        now, there is no guarantee that will remain the case in future releases.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2006. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 00C0           FLAG_PGMODE_MASK:  equ C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;------------------------------------------------
 0000           ;  PMA Data Registers
 0000           ;------------------------------------------------
 0000           
 0040           PMA0_DR:   	  equ 40h		   ; PMA Data Register                        (RW)
 0041           PMA1_DR:   	  equ 41h		   ; PMA Data Register                        (RW)
 0042           PMA2_DR:   	  equ 42h		   ; PMA Data Register                        (RW)
 0043           PMA3_DR:   	  equ 43h		   ; PMA Data Register                        (RW)
 0044           PMA4_DR:   	  equ 44h		   ; PMA Data Register                        (RW)
 0045           PMA5_DR:   	  equ 45h		   ; PMA Data Register                        (RW)
 0046           PMA6_DR:   	  equ 46h		   ; PMA Data Register                        (RW)
 0047           PMA7_DR:   	  equ 47h		   ; PMA Data Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Registers
 0000           ;------------------------------------------------
 0000           
 0048           USB_SOF0:     equ 48h		   ; SOF Frame Number LSB(7:0)                (R)
 0049           USB_SOF1:     equ 49h		   ; SOF Frame Number MSB(10:8)               (R)
 0000           
 004A           USB_CR0:      equ 4Ah		   ; USB Control Register 0                   (RW)
 0080           USB_CR0_ENABLE:       equ 80h    ; MASK: enable/disable USB SIE	          (RW)
 007F           USB_CR0_DEVICE_ADDR:  equ 7Fh    ; MASK: USB Device Address               (RW)
 0000           
 004B           USBIO_CR0:    equ 4Bh		   ; USB IO Control Register 0                (#)
 0080           USBIO_CR0_TEN:        equ 80h    ; MASK: enable/disable manual tx on D+ D-(RW)
 0040           USBIO_CR0_TSE0:       equ 40h    ; MASK: transmit a single ended 0        (RW)
 0020           USBIO_CR0_TD:         equ 20h    ; MASK: transmit J or K state on Bus     (RW)
 0001           USBIO_CR0_RD:         equ 01h    ; MASK: read state of differential rx    (R)
 0000           
 004C           USBIO_CR1:    equ 4Ch		   ; USB IO Control Register 0                (RW)
 0080           USBIO_CR1_IOMODE:     equ 80h    ; MASK: select Bit Bang Mode/USB Mode    (RW)
 0040           USBIO_CR1_DRIVE_MODE: equ 40h    ; MASK: select CMOS mode/Open Drain mode (RW)
 0020           USBIO_CR1_DPI:        equ 20h    ; MASK: drive D+ high/low                (RW)
 0010           USBIO_CR1_DMI:        equ 10h    ; MASK: drive D- high/low                (RW)
 0008           USBIO_CR1_PS2PUEN:    equ 08h    ; MASK: enable/disable 5K Pullup on D+/D-(RW)
 0004           USBIO_CR1_USBPUEN:    equ 04h    ; MASK: enable/disable USB Pullup on D+  (RW)
 0002           USBIO_CR1_DPO:        equ 02h    ; MASK: read D+ pin                      (R)
 0001           USBIO_CR1_DMO:        equ 01h    ; MASK: read D- pin                      (R)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Endpoint Registers
 0000           ;------------------------------------------------
 0000           
 004E           EP1_CNT1:     equ 4Eh		   ; Endpoint 1 Count Register 1              (#)
 0080           EP1_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP1_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP1_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 004F           EP1_CNT:      equ 4Fh		   ; Endpoint 1 Count Register 0              (RW)
 0000           
 0050           EP2_CNT1:     equ 50h		   ; Endpoint 2 Count Register 1              (#)
 0080           EP2_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP2_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP2_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0051           EP2_CNT:      equ 51h		   ; Endpoint 2 Count Register 0              (RW)
 0000           
 0052           EP3_CNT1:     equ 52h		   ; Endpoint 3 Count Register 1              (#)
 0080           EP3_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP3_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP3_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0053           EP3_CNT:      equ 53h		   ; Endpoint 3 Count Register 0              (RW)
 0000           
 0054           EP4_CNT1:     equ 54h		   ; Endpoint 4 Count Register 1              (#)
 0080           EP4_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP4_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP4_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0055           EP4_CNT:      equ 55h		   ; Endpoint 4 Count Register 0              (RW)
 0000           
 0056           EP0_CR:      equ 56h          ; Endpoint 0 Control Register 0            (#)
 0080           EP0_CR_SETUP_RCVD:   equ 80h    ; MASK: Setup received                   (RC)
 0040           EP0_CR_IN_RCVD:      equ 40h    ; MASK: IN received                      (RC)
 0020           EP0_CR_OUT_RCVD:     equ 20h    ; MASK: OUT received                     (RC)
 0010           EP0_CR_ACKD:         equ 10h    ; MASK: Acked transaction                (RC)
 000F           EP0_CR_MODE:         equ 0Fh    ; MASK: Mode response for endpoint       (RW)
 0000           
 0000           ; ------------------------------------------------------------------------------
 0000           ; The following defines are depricated.  Left here for compatibility. 
 0056           EP0_CR0:      equ 56h          ; Endpoint 0 Control Register 0            (#)
 0080           EP0_CR0_SETUP_RCVD:   equ 80h    ; MASK: Setup received                   (RC)
 0040           EP0_CR0_IN_RCVD:      equ 40h    ; MASK: IN received                      (RC)
 0020           EP0_CR0_OUT_RCVD:     equ 20h    ; MASK: OUT received                     (RC)
 0010           EP0_CR0_ACKD:         equ 10h    ; MASK: Acked transaction                (RC)
 000F           EP0_CR0_MODE:         equ 0Fh    ; MASK: Mode response for endpoint       (RW)
 0000           ; ------------------------------------------------------------------------------
 0000           
 0057           EP0_CNT:      equ 57h          ; Endpoint 0 Count Register                (#)
 0080           EP0_CNT_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP0_CNT_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (RC)
 000F           EP0_CNT_BYTE_CNT:    equ 0Fh    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0058           EP0_DR0:      equ 58h          ; Endpoint 0 Data Register 0               (RW)
 0059           EP0_DR1:      equ 59h          ; Endpoint 0 Data Register 1               (RW)
 005A           EP0_DR2:      equ 5Ah          ; Endpoint 0 Data Register 2               (RW)
 005B           EP0_DR3:      equ 5Bh          ; Endpoint 0 Data Register 3               (RW)
 005C           EP0_DR4:      equ 5Ch          ; Endpoint 0 Data Register 4               (RW)
 005D           EP0_DR5:      equ 5Dh          ; Endpoint 0 Data Register 5               (RW)
 005E           EP0_DR6:      equ 5Eh          ; Endpoint 0 Data Register 6               (RW)
 005F           EP0_DR7:      equ 5Fh          ; Endpoint 0 Data Register 7               (RW)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUXCFG:      equ 61h          ; Analog Mux Bus Configuration Register    (RW)
 0080           AMUXCFG_BCOL0_MUX:    equ 80h    ; MASK: select AMuxBusB for Col1 input   (RW)
 0040           AMUXCFG_ACOL0_MUX:    equ 40h    ; MASK: select AMuxBusA for Col0 input   (RW)  
 0030           AMUXCFG_INTCAP:       equ 30h    ; MASK: select pins for static operation (RW)
 000E           AMUXCFG_MUXCLK:       equ 0Eh    ; MASK: select precharge clock source    (RW)
 0001           AMUXCFG_EN:           equ 01h    ; MASK: enable/disable MUXCLK            (RW)
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_CLDIS0:       equ 10h    ; MASK: Column 0 comparator bus synch
 0002           CMP_CR1_CLDIX1:       equ 02h    ; MASK: Column 1 comparator bus synch
 0001           CMP_CR1_CLDIX0:       equ 01h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ DFh          ; USB Mask Register           (RW)
 0080           INT_MSK2_WAKEUP:           equ 80h ; MASK: enable/disable I2C interrupt
 0040           INT_MSK2_EP4:              equ 40h ; MASK: enable/disable SW interrupt
 0020           INT_MSK2_EP3:              equ 20h ; MASK: enable/disable I2C interrupt
 0010           INT_MSK2_EP2:              equ 10h ; MASK: enable/disable SW interrupt
 0008           INT_MSK2_EP1:              equ 08h ; MASK: enable/disable I2C interrupt
 0004           INT_MSK2_EP0:              equ 04h ; MASK: enable/disable SW interrupt
 0002           INT_MSK2_SOF:              equ 02h ; MASK: enable/disable I2C interrupt
 0001           INT_MSK2_BUS_RESET:        equ 01h ; MASK: enable/disable SW interrupt
 0000           
 00E0           INT_MSK0:     equ E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E4           DEC_DH:       equ E4h          ; Data High Register                       (RW)
 00E5           DEC_DL:       equ E5h          ; Data Low Register                        (RW)
 00E6           DEC_CR0:      equ E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  MAC Registers
 0000           ;------------------------------------------------------
 0000           
 00E8           MUL0_X:       equ E8h          ; Multiply Input X Register                (W)
 00E9           MUL0_Y:       equ E9h          ; Multiply Input Y Register                (W)
 00EA           MUL0_DH:      equ EAh          ; Multiply Result High Byte Register       (R)
 00EB           MUL0_DL:      equ EBh          ; Multiply Result Low Byte Register        (R)
 0000           
 00EC           ACC0_DR1:     equ ECh          ; Accumulator Data Register 1              (RW)
 00ED           ACC0_DR0:     equ EDh          ; Accumulator Data Register 0              (RW)
 00EE           ACC0_DR3:     equ EEh          ; Accumulator Data Register 3              (RW)
 00EF           ACC0_DR2:     equ EFh          ; Accumulator Data Register 2              (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  PMA Write and Read Registers
 0000           ;------------------------------------------------
 0000           
 0040           PMA0_WA:   	  equ 40h		   ; PMA Write Pointer Register               (RW)
 0041           PMA1_WA:   	  equ 41h		   ; PMA Write Pointer Register               (RW)
 0042           PMA2_WA:   	  equ 42h		   ; PMA Write Pointer Register               (RW)
 0043           PMA3_WA:   	  equ 43h		   ; PMA Write Pointer Register               (RW)
 0044           PMA4_WA:   	  equ 44h		   ; PMA Write Pointer Register               (RW)
 0045           PMA5_WA:   	  equ 45h		   ; PMA Write Pointer Register               (RW)
 0046           PMA6_WA:   	  equ 46h		   ; PMA Write Pointer Register               (RW)
 0047           PMA7_WA:   	  equ 47h		   ; PMA Write Pointer Register               (RW)
 0000           
 0050           PMA0_RA:   	  equ 50h		   ;  PMA Read Pointer Register               (RW)
 0051           PMA1_RA:   	  equ 51h		   ;  PMA Read Pointer Register               (RW)
 0052           PMA2_RA:   	  equ 52h		   ;  PMA Read Pointer Register               (RW)
 0053           PMA3_RA:   	  equ 53h		   ;  PMA Read Pointer Register               (RW)
 0054           PMA4_RA:   	  equ 54h		   ;  PMA Read Pointer Register               (RW)
 0055           PMA5_RA:   	  equ 55h		   ;  PMA Read Pointer Register               (RW)
 0056           PMA6_RA:   	  equ 56h		   ;  PMA Read Pointer Register               (RW)
 0057           PMA7_RA:   	  equ 57h		   ;  PMA Read Pointer Register               (RW)
 0000           
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus 0/1 To Global Out Enable  (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0065           CMP_GO_EN1:   equ 65h          ; Comparator Bus 2/3 To Global Out Enable  (RW)
 0080           CMP_GO_EN1_GOO7:      equ 80h    ; MASK: Selected Col 3 signal to GOO5
 0040           CMP_GO_EN1_GOO3:      equ 40h    ; MASK: Selected Col 3 signal to GOO1
 0030           CMP_GO_EN1_SEL3:      equ 30h    ; MASK: Column 3 Signal Select
 0008           CMP_GO_EN1_GOO6:      equ 08h    ; MASK: Selected Col 2 signal to GOO4
 0004           CMP_GO_EN1_GOO2:      equ 04h    ; MASK: Selected Col 2 signal to GOO0
 0003           CMP_GO_EN1_SEL2:      equ 03h    ; MASK: Column 2 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Registers
 0000           ;------------------------------------------------
 0000           
 00C1           USB_CR1:      equ C1h          ; USB Control Register 1                   (#)
 0004           USB_CR1_BUS_ACTIVITY: equ 04h    ; MASK: monitors activity on USB bus     (RC)
 0002           USB_CR1_ENABLE_LOCK:  equ 02h    ; MASK: enable/disable auto lock of osc  (RW)
 0001           USB_CR1_REG_ENABLE:   equ 01h    ; MASK: set mode to reg. on/pass thru    (RW)
 0000           
 00C4           EP1_CR0:      equ C4h          ; EP1 Control Register 0                   (#)
 0080           EP1_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP1_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP1_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP1_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C5           EP2_CR0:      equ C5h          ; EP2 Control Register 0                   (#)
 0080           EP2_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP2_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP2_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP2_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C6           EP3_CR0:      equ C6h          ; EP3 Control Register 0                   (#)
 0080           EP3_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP3_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP3_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP3_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C7           EP4_CR0:      equ C7h          ; EP4 Control Register 0                   (#)
 0080           EP4_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP4_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP4_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP4_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  AMuxBus Mux Control Registers
 0000           ;------------------------------------------------
 0000           
 00D8           MUX_CR0:      equ D8h          ; Analog Mux Bus Port 0 Bit Enables Reg    (RW)
 00D9           MUX_CR1:      equ D9h          ; Analog Mux Bus Port 1 Bit Enables Reg    (RW)
 00DA           MUX_CR2:      equ DAh          ; Analog Mux Bus Port 2 Bit Enables Reg    (RW)
 00DB           MUX_CR3:      equ DBh          ; Analog Mux Bus Port 3 Bit Enables Reg    (RW)
 00EC           MUX_CR4:      equ ECh          ; Analog Mux Bus Port 4 Bit Enables Reg    (RW)
 00ED           MUX_CR5:      equ EDh          ; Analog Mux Bus Port 5 Bit Enables Reg    (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ E7h          ; Data Control Register 2                  (RW)
 0000           
 00E8           IMO_TR:               equ E8h    ; Internal Main Oscillator Trim Register   (RW)
 00E9           ILO_TR:               equ E9h    ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:               equ EAh    ; Band Gap Trim Register                   (RW)
 00EB           ECO_TR:               equ EBh    ; External Oscillator Trim Register        (W)
 00EF           IMO_TR2:              equ EFh    ; Internal Main Oscillator Gain Trim Register (RW)
 0000           
 00FD           DAC_CR:       equ FDh          ; DAC Control Register                     (RW)
 0080           DAC_CR_SPLIT_MUX:     equ 80h    ; MASK: enable/disable Splitting of AMuxBuses
 0040           DAC_CR_MUXCLK_GE:     equ 40h    ; MASK: Connect/Disconnect AMuxBus to GOO[6]
 0008           DAC_CR_RANGE:	       equ 08h    ; MASK: High Range/Low Range
 0006           DAC_CR_OSCMODE:	    equ 06h    ; MASK: Sets Reset Mode for AMuxBus
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: enable/disable AMux Bus
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           MACRO GET_REG
 0000           IF TEST_BENCH
 0000               mov     a,[@0]                           ; Get the simulated reg
 0000           ELSE
 0000               mov     a,reg[@0]                        ; Get the real reg
 0000           ENDIF    
 0000           MACRO PUT_REG
 0000           IF TEST_BENCH
 0000               mov     [@0],a                           ; Set the simulated reg
 0000           ELSE
 0000               mov     reg[@0],a                        ; Set the real reg
 0000           ENDIF    
 0000           MACRO PUT_REG_CONST
 0000           IF TEST_BENCH
 0000               mov     [@0],@1                          ; Set the simulated reg
 0000           ELSE
 0000               mov     reg[@0],@1                       ; Set the real reg
 0000           ENDIF    
 0000           MACRO   GET_WORD
 0000                   RAM_X_POINTS_TO_STACKPAGE                    ; Since called by interrupt we can call this
 0000               PUSH A                              ; Quickly get a RAM temp
 0000               PUSH A                              ; Save the source MSB
 0000               ROMX                                ; Get the first byte
 0000               PUSH X                              ; Save X
 0000               MOV  X,SP                           ; Get SP, to index to the temp 
 0000               MOV  [X - 3],A                      ; Save the first byte
 0000               POP  X                              ; Get back the source LSB
 0000               POP  A                              ; And the MSB
 0000               INC  X                              ; Point to the second byte
 0000               ADC  A, 0                           ; 
 0000               ROMX                                ; Get the second byte
 0000               MOV  X,A                            ; Save it in X
 0000               POP  A                              ; And the first byte in A
 0000               RAM_CHANGE_PAGE_MODE 00             ; Reset stack mode back
 0000           MACRO   NULL_PTR_CHECK
 0000               SWAP    A, X                        ; LSB non-zero?
 0000               JNZ     .ok                         ; Exit on non-zero
 0000               SWAP    A, X                        ; MSB zero
 0000               JZ      @0                          ; Jump to the null pointer handler
 0000               JMP     .exit
 0000           .ok:
 0000               SWAP    A, X                        ; Put them back
 0000           .exit:
 0000           NULL_PTR:   EQU 0                       ; Null pointer value
 0000           
 0000           ;--------------------------------------------------
 0000           ; Transfer Descriptor--Data Source
 0000           ;--------------------------------------------------
 0000           USB_DS_ROM:                                      EQU 0x00
 0001           USB_DS_RAM:                                      EQU 0x01
 0002           USB_DS_RAM_CB:                                   EQU 0x02
 0003           USB_DS_RAM_MASK:                                 EQU 0x03
 0000           
 0000           ;--------------------------------------------------
 0000           ; TRANSFER DESCRIPTOR MACROS
 0000           ;--------------------------------------------------
 0000           
 0000           ;-----------------------------------------------
 0000           ; TD_START_TABLE MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = Number of table entries
 0000           ; Register setup
 0000           ;   N/A (builds ROM data at assembly time)
 0000           ;-----------------------------------------------
 0000           MACRO   TD_START_TABLE
 0000               DB      ((@0) - 1)                 ; Number of table entries - 1
 0000           MACRO   TD_ENTRY
 0000               DB  @0                             ; Data source (USB_DS_*)
 0000               DW  @1                             ; Transfer size
 0000               DW  @2                             ; Data source address
 0000               DW  @3                             ; Transfer Completion Status Block Address
 0000               DB  0xde                           ; Reserved 
 0008           TD_ENTRY_SIZE:                         EQU 8
 0001           TD_START_SIZE:                         EQU 1
 0000           ;-----------------------------------------------
 0000           ; TD_INDEX_TO_OFFSET MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = RAM address of Index
 0000           ; Register setup
 0000           ;   A = DC (restored)
 0000           ;   X = DC (not used)
 0000           ;--------------------------------------------------
 0000           MACRO   TD_INDEX_TO_OFFSET
 0000               PUSH    A                          ; Save a work register
 0000               ASL     [@0]                       ; Index * 2
 0000               ASL     [@0]                       ; Index * 4
 0000               ASL     [@0]                       ; Index * 8
 0000               POP     A                          ; Restore the work register
 0000           MACRO LT_START
 0000               DB      (@0)                       ; Table size
 0000           MACRO LT_ENTRY
 0000               DW      (@0)                       ; Table entry
 0000               DW      (@1)                       ; Table entry
 0002           LT_ENTRY_SIZE:                         EQU 2
 0001           LT_START_SIZE:                         EQU 1
 0000           
 0000           ;-----------------------------------------------
 0000           ; LT_INDEX_TO_OFFSET MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = RAM address of Index
 0000           ; Register setup
 0000           ;   A = DC (not used)
 0000           ;   X = DC (not used)
 0000           ;--------------------------------------------------
 0000           MACRO   LT_INDEX_TO_OFFSET
 0000               ASL     [@0]                       ; Simply shift (mult by 2)
 0000               ASL     [@0]                       ;              (mult by 4)
 0000           MACRO DISPATCHER
 0000               CMP   A,@1
 0000               JNC   .dispatch_not_supported
 0000               ASL   A
 0000               JACC  @0
 0000           .dispatch_not_supported:
 0000               LJMP  @2    
 0001           USB_NOT_SUPPORTED:  EQU 0x01
 0002           USB_UM_SUPPLIED:    EQU 0x02
 0004           USB_APP_SUPPLIED:   EQU 0x04
 0000           ; end of file USBUART_macro.inc
 00DF           USBUART_INT_REG:                           equ 0xDF
 0001           USBUART_INT_RESET_MASK:                    equ 0x01
 0002           USBUART_INT_SOF_MASK:                      equ 0x02
 0004           USBUART_INT_EP0_MASK:                      equ 0x04
 0008           USBUART_INT_EP1_MASK:                      equ 0x08
 0010           USBUART_INT_EP2_MASK:                      equ 0x10
 0020           USBUART_INT_EP3_MASK:                      equ 0x20
 0040           USBUART_INT_EP4_MASK:                      equ 0x40
 0080           USBUART_INT_WAKEUP_MASK:                   equ 0x80
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for USBUART API's.
 0000           ;--------------------------------------------------
 0002           USBUART_3V_OPERATION:              EQU 0x02
 0003           USBUART_5V_OPERATION:              EQU 0x03
 0000           
 0000           USBUART_1_STOPBIT:                 EQU 0x00    
 0001           USBUART_1_5_STOPBIT:               EQU 0x01    
 0002           USBUART_2_STOPBIT:                 EQU 0x02
 0000           
 0000           USBUART_PARITY_NONE:               EQU 0x00    
 0001           USBUART_PARITY_ODD:                EQU 0x01    
 0002           USBUART_PARITY_EVEN:               EQU 0x02    
 0003           USBUART_PARITY_MARK:               EQU 0x03    
 0004           USBUART_PARITY_SPACE:              EQU 0x04    
 0000           
 0001           USBUART_DTR:                       EQU 0x01    
 0002           USBUART_RTS:                       EQU 0x02
 0000                                                       
 0001           USBUART_DCD:                       EQU 0x01    
 0002           USBUART_DSR:                       EQU 0x02    
 0004           USBUART_BREAK:                     EQU 0x04    
 0008           USBUART_RING:                      EQU 0x08    
 0010           USBUART_FRAMING_ERR:               EQU 0x10    
 0020           USBUART_PARITY_ERR:                EQU 0x20    
 0040           USBUART_OVERRUN:                   EQU 0x40    
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for USBUART API's.
 0000           ;--------------------------------------------------
 0000           
 0003           USBUART_bNumStringDescrs:              EQU 0x03
 0000           
 0005           USB_NUM_ENDPOINTS:                          EQU 5 
 0004           USB_MAX_EP_NUMBER:                          EQU (USB_NUM_ENDPOINTS - 1) 
 0000           
 0000           ;--------------------------------------------------
 0000           ; Registers for USBUART API's.
 0000           ;--------------------------------------------------
 0000           
 004A           USBUART_ADDR:                               EQU 0x4a
 004B           USBUART_USBIO_CR0:                          EQU 0x4b
 004C           USBUART_USBIO_CR1:                          EQU 0x4c
 00C1           USBUART_USB_CR1:                            EQU 0xc1 
 0000           
 0056           USBUART_EP0MODE:                            EQU 0x56
 0057           USBUART_EP0CNT:                             EQU 0x57
 0058           USBUART_EP0DATA:                            EQU 0x58
 00C4           USBUART_EP1MODE:                            EQU 0xc4
 004F           USBUART_EP1CNT0:                            EQU 0x4f
 004E           USBUART_EP1CNT1:                            EQU 0x4e
 00C5           USBUART_EP2MODE:                            EQU 0xc5
 0051           USBUART_EP2CNT0:                            EQU 0x51
 0050           USBUART_EP2CNT1:                            EQU 0x50
 00C6           USBUART_EP3MODE:                            EQU 0xc6
 0053           USBUART_EP3CNT0:                            EQU 0x53
 0052           USBUART_EP3CNT1:                            EQU 0x52
 00C7           USBUART_EP4MODE:                            EQU 0xc7
 0055           USBUART_EP4CNT0:                            EQU 0x55
 0054           USBUART_EP4CNT1:                            EQU 0x54
 0000           
 0000           ;--------------------------------------------------
 0000           ; Endpoint 0 offsets (Table 9-2)
 0000           ;--------------------------------------------------
 0000           bmRequestType:                              EQU 0
 0001           bRequest:                                   EQU 1
 0002           wValue:                                     EQU 2
 0003           wValueHi:                                   EQU 3
 0002           wValueLo:                                   EQU 2
 0004           wIndex:                                     EQU 4
 0005           wIndexHi:                                   EQU 5
 0004           wIndexLo:                                   EQU 4
 0006           wLength:                                    EQU 6
 0007           wLengthHi:                                  EQU 7
 0006           wLengthLo:                                  EQU 6
 0000           
 0000           ;--------------------------------------------------
 0000           ; Request Types (Table 9-4)
 0000           ;--------------------------------------------------
 0000           USB_GET_STATUS:                             EQU    0x00
 0001           USB_CLEAR_FEATURE:                          EQU    0x01
 0003           USB_SET_FEATURE:                            EQU    0x03
 0005           USB_SET_ADDRESS:                            EQU    0x05
 0006           USB_GET_DESCRIPTOR:                         EQU    0x06
 0007           USB_SET_DESCRIPTOR:                         EQU    0x07
 0008           USB_GET_CONFIGURATION:                      EQU    0x08
 0009           USB_SET_CONFIGURATION:                      EQU    0x09
 000A           USB_GET_INTERFACE:                          EQU    0x0A
 000B           USB_SET_INTERFACE:                          EQU    0x0B
 000C           USB_SYNCH_FRAME:                            EQU    0x0C
 0000           
 0000           ;--------------------------------------------------
 0000           ; Descriptor Types (Table 9-5)
 0000           ;--------------------------------------------------
 0001           DESCR_TYPE_DEVICE:                          EQU     1
 0002           DESCR_TYPE_CONFIG:                          EQU     2
 0003           DESCR_TYPE_STRING:                          EQU     3
 0004           DESCR_TYPE_INTERFACE:                       EQU     4
 0005           DESCR_TYPE_ENDPOINT:                        EQU     5
 0006           DESCR_TYPE_DEVICE_QUALIFIER:                EQU     6
 0007           DESCR_TYPE_OTHER_SPEED:                     EQU     7
 0008           DESCR_TYPE_INTERFACE_POWER:                 EQU     8
 0000           
 0000           ;--------------------------------------------------
 0000           ; Feature Selectors (Table 9-6)
 0000           ;--------------------------------------------------
 0001           USB_DEVICE_REMOTE_WAKEUP:                   EQU    0x01
 0000           USB_ENDPOINT_HALT:                          EQU    0x00
 0002           USB_TEST_MODE:                              EQU    0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Device Status (Figure 9-4)
 0000           ;--------------------------------------------------
 0000           USB_DEVICE_STATUS_BUS_POWERED:              EQU   0x00
 0001           USB_DEVICE_STATUS_SELF_POWERED:             EQU   0x01
 0002           USB_DEVICE_STATUS_REMOTE_WAKEUP:            EQU   0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Status (Figure 9-4)
 0000           ;--------------------------------------------------
 0001           USB_ENDPOINT_STATUS_HALT:                   EQU    0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Directions
 0000           ;--------------------------------------------------
 0080           USB_DIR_IN:                                 EQU    0x80
 0000           USB_DIR_OUT:                                EQU    0x00
 007F           USB_DIR_UNUSED:                             EQU    0x7F
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Address Symbols 
 0000           ;--------------------------------------------------
 0000           EP0:                                        EQU    0x00
 0001           EP1:                                        EQU    0x01
 0002           EP2:                                        EQU    0x02
 0003           EP3:                                        EQU    0x03
 0004           EP4:                                        EQU    0x04
 0000           
 0000           ;--------------------------------------------------
 0000           ; Control Endpoint States--These act as JACC jump values
 0000           ;--------------------------------------------------
 0000           USB_TRANS_STATE_IDLE:                       EQU     0x00         ;
 0002           USB_TRANS_STATE_CONTROL_READ:               EQU     0x02         ;
 0004           USB_TRANS_STATE_CONTROL_WRITE:              EQU     0x04         ;
 0006           USB_TRANS_STATE_NO_DATA_CONTROL:            EQU     0x06         ;
 0000           
 0000           ;--------------------------------------------------
 0000           ; Control Write flag values to indicate pending data changes
 0000           ;--------------------------------------------------
 0001           USB_ADDRESS_CHANGE_PENDING:     EQU     0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; Register Constants for USBUART
 0000           ;--------------------------------------------------
 0080           USB_ADDR_ENABLE:                             EQU    0x80
 0040           USB_CNT_VALID:                               EQU    0x40
 0080           USB_CNT_TOGGLE:                              EQU    0x80
 0004           USB_PULLUP_ENABLE:                          EQU    0x04
 0000           USB_AUTO_DPDM:                               EQU    0x00
 0003           USB_REG_ENABLE:                              EQU    0x03 
 0002           USB_PASS_THRU:                               EQU    0x02
 0004           USB_BUS_ACTIVITY:                            EQU    0x04
 0000           
 0000           USB_MODE_DISABLE:                            EQU 0x00
 0001           USB_MODE_NAK_IN_OUT:                         EQU 0x01
 0002           USB_MODE_STATUS_OUT_ONLY:                    EQU 0x02
 0003           USB_MODE_STALL_IN_OUT:                       EQU 0x03
 0004           USB_MODE_RESERVED_0100:                      EQU 0x04
 0005           USB_MODE_ISO_OUT:                            EQU 0x05
 0006           USB_MODE_STATUS_IN_ONLY:                     EQU 0x06
 0007           USB_MODE_ISO_IN:                             EQU 0x07
 0008           USB_MODE_NAK_OUT:                            EQU 0x08
 0009           USB_MODE_ACK_OUT:                            EQU 0x09
 000A           USB_MODE_RESERVED_1010:                      EQU 0x0A
 000B           USB_MODE_ACK_OUT_STATUS_IN:                  EQU 0x0B
 000C           USB_MODE_NAK_IN:                             EQU 0x0C
 000D           USB_MODE_ACK_IN:                             EQU 0x0D
 000E           USB_MODE_RESERVED_1110:                      EQU 0x0E
 000F           USB_MODE_ACK_IN_STATUS_OUT:                  EQU 0x0F
 0080           USB_MODE_STALL_DATA_EP:                      EQU 0x80
 0000           
 0000           ;--------------------------------------------------
 0000           ; LoadInEP Count Toggle (Argument values)
 0000           ;--------------------------------------------------
 0000           USB_NO_TOGGLE:                               EQU 0x00
 0001           USB_TOGGLE:                                  EQU 0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; FORCE J/K/SE0 (Argument values)
 0000           ;--------------------------------------------------
 00A0           USB_FORCE_J:                                 EQU 0xA0
 0080           USB_FORCE_K:                                 EQU 0x80
 00C0           USB_FORCE_SE0:                               EQU 0xC0
 0000           USB_FORCE_NONE:                              EQU 0x00
 0001           USB_FORCE_STATE:                             EQU 0x01
 0000           
 0000           ;-----------------------------------------------
 0000           ; Endpoint event flags
 0000           ;-----------------------------------------------
 0002           NO_EVENT_ALLOWED:       equ               2
 0001           EVENT_PENDING:      equ               1
 0000           NO_EVENT_PENDING:   equ               0
 0000           
 0000           IN_BUFFER_FULL:     equ               NO_EVENT_PENDING
 0001           IN_BUFFER_EMPTY:    equ               EVENT_PENDING
 0001           OUT_BUFFER_FULL:    equ               EVENT_PENDING
 0000           OUT_BUFFER_EMPTY:   equ               NO_EVENT_PENDING
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Request Dispatch Functions, including overrides
 0000           ;--------------------------------------------------
 0001           USB_NOT_SUPPORTED:  EQU 0x01
 0002           USB_UM_SUPPLIED:    EQU 0x02
 0004           USB_APP_SUPPLIED:   EQU 0x04
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Device (dev)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_dev_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_dev_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_05: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_dev_06: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_dev_07: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_dev_08: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Device (dev)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_dev_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_01: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_02: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_03: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_04: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_05: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_dev_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_dev_08: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_09: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Interface (ifc)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_ifc_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_ifc_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_05: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_08: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_09: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_ifc_10: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_ifc_00: equ USB_NOT_SUPPORTED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Endpoint (ep)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_ep_00: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Endpoint (ep)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_ep_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_ep_01: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_ep_02: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_ep_03: equ USB_UM_SUPPLIED
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Standard Requests
 0000           ;-----------------------------------------------
 0001           USB_CB_h2d_std_dev: equ 1
 0001           USB_CB_h2d_std_ifc: equ 1
 0001           USB_CB_h2d_std_ep:  equ 1
 0000           USB_CB_h2d_std_oth: equ 0
 0001           USB_CB_d2h_std_dev: equ 1
 0001           USB_CB_d2h_std_ifc: equ 1
 0001           USB_CB_d2h_std_ep:  equ 1
 0000           USB_CB_d2h_std_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Class Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_cls_dev: equ 0
 0001           USB_CB_h2d_cls_ifc: equ 1
 0000           USB_CB_h2d_cls_ep:  equ 0
 0000           USB_CB_h2d_cls_oth: equ 0
 0000           USB_CB_d2h_cls_dev: equ 0
 0001           USB_CB_d2h_cls_ifc: equ 1
 0000           USB_CB_d2h_cls_ep:  equ 0
 0000           USB_CB_d2h_cls_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Vendor Specific Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_vnd_dev: equ 0
 0000           USB_CB_h2d_vnd_ifc: equ 0
 0000           USB_CB_h2d_vnd_ep:  equ 0
 0000           USB_CB_h2d_vnd_oth: equ 0
 0000           USB_CB_d2h_vnd_dev: equ 0
 0000           USB_CB_d2h_vnd_ifc: equ 0
 0000           USB_CB_d2h_vnd_ep:  equ 0
 0000           USB_CB_d2h_vnd_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Reserved Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_rsv_dev: equ 0
 0000           USB_CB_h2d_rsv_ifc: equ 0
 0000           USB_CB_h2d_rsv_ep:  equ 0
 0000           USB_CB_h2d_rsv_oth: equ 0
 0000           USB_CB_d2h_rsv_dev: equ 0
 0000           USB_CB_d2h_rsv_ifc: equ 0
 0000           USB_CB_d2h_rsv_ep:  equ 0
 0000           USB_CB_d2h_rsv_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; Transfer Completion Notification
 0000           ;-----------------------------------------------
 0000           USB_XFER_IDLE:         equ      0x00
 0001           USB_XFER_STATUS_ACK:   equ      0x01
 0002           USB_XFER_PREMATURE:    equ      0x02
 0003           USB_XFER_ERROR:        equ      0x03
 0000           
 0000           ; This macro is used to allocate a completion status block
 0000           ; for all Requests.  The macro parameter is used
 0000           ; to prefix the two data elements.
 0000           USB_XFER_STATUS:       equ      0
 0001           USB_XFER_LENGTH:       equ      1
 0000           MACRO    USB_XFER_STATUS_BLOCK
 0000               BLK    1    ; Completion Status
 0000               BLK    2    ; Transfer Length
 0000           USBUART_VSR_SUPPORT: EQU 0
                IF USB_CB_h2d_vnd_dev
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_ifc
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_ep
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_oth
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_dev
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_ifc
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_ep
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_oth
                USBUART_VSR_SUPPORT: EQU 1
                ENDIF
                
                ; end of file USBUART.inc
                
                ;-----------------------------------------------
                ;  Constant Data Allocation
                ;-----------------------------------------------
                AREA UserModules (ROM, REL)
                EXPORT USBUART_USB_EP_BIT_LOOKUP
 0000           .LITERAL
 0000           USBUART_USB_EP_BIT_LOOKUP:  ;
 0000 01            DB     01H                       ; EP0
 0001 02            DB     02H                       ; EP1
 0002 04            DB     04H                       ; EP2
 0003 08            DB     08H                       ; EP3
 0004 10            DB     010H                      ; EP4
 0005           .ENDLITERAL
 0005           
 0005           ;-----------------------------------------------------------------------------
 0005           ;  FUNCTION NAME: USBUART_Not_Supported
 0005           ;
 0005           ;  DESCRIPTION:
 0005           ;
 0005           ;-----------------------------------------------------------------------------
 0005           ;
 0005           ;  ARGUMENTS:
 0005           ;
 0005           ;  RETURNS:
 0005           ;
 0005           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0005           ;
 0005           ;  THEORY of OPERATION or PROCEDURE:
 0005           ;
 0005           ;-----------------------------------------------------------------------------
 0005           
 0005           ; d2h_std_dev
                IF (USB_CB_SRC_d2h_std_dev_00 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_dev_00
                USBUART_CB_d2h_std_dev_00:
                ENDIF
                IF (USB_CB_SRC_d2h_std_dev_01 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_dev_01
 0005           USBUART_CB_d2h_std_dev_01:
                ENDIF
                IF (USB_CB_SRC_d2h_std_dev_02 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_dev_02
 0005           USBUART_CB_d2h_std_dev_02:
                ENDIF
                IF (USB_CB_SRC_d2h_std_dev_03 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_dev_03
 0005           USBUART_CB_d2h_std_dev_03:
                ENDIF
                IF (USB_CB_SRC_d2h_std_dev_04 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_dev_04
 0005           USBUART_CB_d2h_std_dev_04:
                ENDIF
                IF (USB_CB_SRC_d2h_std_dev_05 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_dev_05
 0005           USBUART_CB_d2h_std_dev_05:
                ENDIF
                IF (USB_CB_SRC_d2h_std_dev_06 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_dev_06
                USBUART_CB_d2h_std_dev_06:
                ENDIF
                IF (USB_CB_SRC_d2h_std_dev_07 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_dev_07
 0005           USBUART_CB_d2h_std_dev_07:
                ENDIF
                IF (USB_CB_SRC_d2h_std_dev_08 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_dev_08
                USBUART_CB_d2h_std_dev_08:
                ENDIF
                
                ; h2d_std_dev
                IF (USB_CB_SRC_h2d_std_dev_00 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_dev_00
 0005           USBUART_CB_h2d_std_dev_00:
                ENDIF
                IF (USB_CB_SRC_h2d_std_dev_01 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_dev_01
                USBUART_CB_h2d_std_dev_01:
                ENDIF
                IF (USB_CB_SRC_h2d_std_dev_02 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_dev_02
 0005           USBUART_CB_h2d_std_dev_02:
                ENDIF
                IF (USB_CB_SRC_h2d_std_dev_03 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_dev_03
                USBUART_CB_h2d_std_dev_03:
                ENDIF
                IF (USB_CB_SRC_h2d_std_dev_04 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_dev_04
 0005           USBUART_CB_h2d_std_dev_04:
                ENDIF
                IF (USB_CB_SRC_h2d_std_dev_05 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_dev_05
                USBUART_CB_h2d_std_dev_05:
                ENDIF
                IF (USB_CB_SRC_h2d_std_dev_06 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_dev_06
 0005           USBUART_CB_h2d_std_dev_06:
                ENDIF
                IF (USB_CB_SRC_h2d_std_dev_07 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_dev_07
 0005           USBUART_CB_h2d_std_dev_07:
                ENDIF
                IF (USB_CB_SRC_h2d_std_dev_08 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_dev_08
 0005           USBUART_CB_h2d_std_dev_08:
                ENDIF
                IF (USB_CB_SRC_h2d_std_dev_09 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_dev_09
                USBUART_CB_h2d_std_dev_09:
                ENDIF
                
                ; d2h_std_ifc
                IF (USB_CB_SRC_d2h_std_ifc_00 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_00
                USBUART_CB_d2h_std_ifc_00:
                ENDIF
                IF (USB_CB_SRC_d2h_std_ifc_01 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_01
 0005           USBUART_CB_d2h_std_ifc_01:
                ENDIF
                IF (USB_CB_SRC_d2h_std_ifc_02 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_02
 0005           USBUART_CB_d2h_std_ifc_02:
                ENDIF
                IF (USB_CB_SRC_d2h_std_ifc_03 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_03
 0005           USBUART_CB_d2h_std_ifc_03:
                ENDIF
                IF (USB_CB_SRC_d2h_std_ifc_04 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_04
 0005           USBUART_CB_d2h_std_ifc_04:
                ENDIF
                IF (USB_CB_SRC_d2h_std_ifc_05 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_05
 0005           USBUART_CB_d2h_std_ifc_05:
                ENDIF
                IF (USB_CB_SRC_d2h_std_ifc_06 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_06
 0005           USBUART_CB_d2h_std_ifc_06:
                ENDIF
                IF (USB_CB_SRC_d2h_std_ifc_07 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_07
 0005           USBUART_CB_d2h_std_ifc_07:
                ENDIF
                IF (USB_CB_SRC_d2h_std_ifc_08 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_08
 0005           USBUART_CB_d2h_std_ifc_08:
                ENDIF
                IF (USB_CB_SRC_d2h_std_ifc_09 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_09
 0005           USBUART_CB_d2h_std_ifc_09:
                ENDIF
                IF (USB_CB_SRC_d2h_std_ifc_10 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ifc_10
                USBUART_CB_d2h_std_ifc_10:
                ENDIF
                
                ; d2h_std_ifc
                IF (USB_CB_SRC_h2d_std_ifc_00 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_ifc_00
 0005           USBUART_CB_h2d_std_ifc_00:
                ENDIF
                
                ; d2h_std_ep
                IF (USB_CB_SRC_d2h_std_ep_00 & USB_NOT_SUPPORTED)
                export  USBUART_CB_d2h_std_ep_00
                USBUART_CB_d2h_std_ep_00:
                ENDIF
                
                ; h2d_std_ep
                IF (USB_CB_SRC_h2d_std_ep_00 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_ep_00
 0005           USBUART_CB_h2d_std_ep_00:
                ENDIF
                IF (USB_CB_SRC_h2d_std_ep_01 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_ep_01
                USBUART_CB_h2d_std_ep_01:
                ENDIF
                IF (USB_CB_SRC_h2d_std_ep_02 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_ep_02
 0005           USBUART_CB_h2d_std_ep_02:
                ENDIF
                IF (USB_CB_SRC_h2d_std_ep_03 & USB_NOT_SUPPORTED)
                export  USBUART_CB_h2d_std_ep_03
                USBUART_CB_h2d_std_ep_03:
                ENDIF
                
                export  USBUART_Not_Supported
                export _USBUART_Not_Supported
 0005           USBUART_Not_Supported:
 0005           _USBUART_Not_Supported:
 0005 5000         MOV    A, 0                         ; Count 0
 0007 5703         MOV    X, USB_MODE_STALL_IN_OUT     ; Stall the request
 0009 7D0000       LJMP   USBUART_EP0_UPD_MODE_EXIT
 000C           ;-----------------------------------------------------------------------------
 000C           ;  FUNCTION NAME: USBUART_CB_d2h_std_dev_00
 000C           ;
 000C           ;  DESCRIPTION:   Get Device Status
 000C           ;
 000C           ;****************************************************************
 000C           ; STANDARD DEVICE IN REQUEST: Get_Device_Status
 000C           ;****************************************************************
 000C           ;
 000C           ; bmRequestType  : (IN | STANDARD | DEVICE)       = 80h     
 000C           ; bRequest       : GET_STATUS                     = 00h    
 000C           ; wValue         : RESERVED                       = 0000h  
 000C           ; wIndex         : RESERVED                       = 0000h
 000C           ; wLength        : SIZEOF_ENDPOINT_STATUS         = 0002h  
 000C           ; 
 000C           ; The GET_DEVICE_STATUS request returns the current device status.
 000C           ;
 000C           ;****************************************************************
 000C           ;-----------------------------------------------------------------------------
 000C           ;
 000C           ;  ARGUMENTS:
 000C           ;
 000C           ;  RETURNS:
 000C           ;
 000C           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 000C           ;
 000C           ;  THEORY of OPERATION or PROCEDURE:
 000C           ;
 000C           ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_d2h_std_dev_00 & USB_UM_SUPPLIED)
 000C           .LITERAL
 000C           GetStatusTransferDescrTable:
 000C 00            DB      ((1) - 1)                 ; Number of table entries - 1
 000D 01            DB  USB_DS_RAM                             ; Data source (USB_DS_*)
 000E 0002          DW  2                             ; Transfer size
 0010 0000          DW  USBUART_TransferBuffer                             ; Data source address
 0012 0000          DW  NULL_PTR                             ; Transfer Completion Status Block Address
 0014 DE            DB  0xde                           ; Reserved 
 0015           .ENDLITERAL
                export  USBUART_CB_d2h_std_dev_00
 0015           USBUART_CB_d2h_std_dev_00:
 0015 550000        MOV     [USBUART_t2], 0            ; Use the UM temp var--Selector
 0018           
 0018 550100        MOV     [USBUART_TransferBuffer+1], 0  ; Use the UM Transfer Buffer
 001B 5F0000        MOV     [USBUART_TransferBuffer], [USBUART_DeviceStatus]
 001E           
 001E 500C          MOV     A,>GetStatusTransferDescrTable  ; Get the ROM Address MSB
 0020 570C          MOV     X,<GetStatusTransferDescrTable  ; Get the ROM Address LSB
 0022 828E          JMP     USBUART_GetTableEntry_Local_Std
                ENDIF
                ;-----------------------------------------------------------------------------
                ; FUNCTION NAME: USBUART_CB_d2h_std_dev_06
                ;
                ; DESCRIPTION:   Get Device Descriptor
                ;
                ;****************************************************************
                ; STANDARD DEVICE IN REQUEST: Get_Device_Descriptor
                ;****************************************************************
                ;
                ; bmRequestType  : (IN | STANDARD | DEVICE)       = 80h
                ; bRequest       : GET_DESCRIPTOR                 = 06h    
                ; wValue         : DESCRIPTOR TYPE | INDEX        = xxxxh  
                ; wIndex         : ZERO or LANG_ID                = xxxxh
                ; wLength        : SIZEOF_DESCRIPTOR              = --xxh  
                ; 
                ; The GET_DEVICE_DESCRIPTOR returns the specified descriptor if 
                ; the descriptor exists. 
                ; 
                ; The upper byte of wValue contains the descriptor type and 
                ; the lower byte contains the descriptor index. wIndex 
                ; contains either 0000h or the Language ID. wLength contains 
                ; the descriptor length. The actual descriptor information is 
                ; transferred in subsequent data packets. 
                ;
                ;****************************************************************
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_d2h_std_dev_06 & USB_UM_SUPPLIED)
                export  USBUART_CB_d2h_std_dev_06
 0024           USBUART_CB_d2h_std_dev_06:
 0024           ;-----------------------------------------------------------------------------
 0024           ; Dispatch to the proper handler
 0024           ;-----------------------------------------------------------------------------
 0024 5D5B          MOV     A, REG[USBUART_EP0DATA+wValueHi] ; Get the descriptor type
 0026 64            ASL     A                          ; Make it into a offset
 0027 3908          CMP     A, GET_DESCR_DISPATCH_SIZE         ; Validity check
 0029 DFDB          JNC     USBUART_Not_Supported
 002B           
 002B E001          JACC    GET_DESCR_DISPATCH
 002D           
 002D           GET_DESCR_DISPATCH:
 002D 8FD7          JMP     USBUART_Not_Supported      ; Invalid
 002F 8028          JMP     USBUART_SendDeviceDescr    ; Device Descriptor
 0031 8003          JMP     USBUART_SendConfigDescr    ; Configuration Descriptor
                IF  USBUART_bNumStringDescrs           ; Number of String Descriptor defined with the Wizard
 0033 8034          JMP     USBUART_SendStringDescr    ; String Descriptor
                ELSE
                    JMP     USBUART_Not_Supported      ; Not supported if we don't have
                                                            ; any String Descriptor
                ENDIF
                
 0035           GET_DESCR_DISPATCH_END:
 0008           GET_DESCR_DISPATCH_SIZE: EQU (GET_DESCR_DISPATCH_END - GET_DESCR_DISPATCH)     
 0035           ;-----------------------------------------------------------------------------
 0035           ; Configuration Descriptor Handler
 0035           ;-----------------------------------------------------------------------------
 0035           USBUART_SendConfigDescr:
 0035 9000          CALL    USBUART_GET_DEVICE_TABLE_ENTRY
 0037 4B            SWAP    A, X
 0038 0102          ADD     A, 2                       ; We want the pointer to the descriptor table (second entry)
 003A 4B            SWAP    A, X
 003B 0900          ADC     A, 0                       ; Don't forget the carry
 003D 550000        MOV    [USBUART_t2], USBUART_t1    ; Set up the destination  
 0040 9000          CALL    USBUART_GETWORD            ; Get the pointer
 0042               
 0042 5100          MOV     A, [USBUART_t1]            ; Pointer MSB
 0044 5801          MOV     X, [USBUART_t1+1]          ; Pointer LSB
 0046               
 0046 08            PUSH    A                          ; Save the MSB
 0047               
 0047 5D5A          MOV     A, REG[USBUART_EP0DATA+wValueLo]  ; Get the descriptor index
 0049 5300          MOV     [USBUART_t2], A            ; Use the UM temp var--Selector
 004B 18            POP     A                          ; Need the MSB for the range check
 004C 08            PUSH    A                          ; Save the MSB for after the range check
 004D 28            ROMX                               ; First entry is the table size (only a byte)
 004E 3A00          CMP     A, [USBUART_t2]            ; Range check
 0050 D004          JNC     .range_ok
 0052               
 0052 18            POP     A                          ; Fix the stack
 0053 8FB1          JMP    USBUART_Not_Supported
 0055           
 0055           .range_ok:
 0055 18            POP     A                          ; Get the MSB back
 0056 825A          JMP     USBUART_GetTableEntry_Local_Std
 0058           ;-----------------------------------------------------------------------------
 0058           ; Device Descriptor Handler
 0058           ;-----------------------------------------------------------------------------
 0058           USBUART_SendDeviceDescr:
 0058 5F0000        MOV     [USBUART_t2], [USBUART_bCurrentDevice]  ; Use the UM temp var--Selector
 005B 5000          MOV     A,>USBUART_DEVICE_DESCR_TABLE  ; Get the ROM Address MSB
 005D 5700          MOV     X,<USBUART_DEVICE_DESCR_TABLE  ; Get the ROM Address LSB
 005F 28            ROMX                               ; First entry is the table size (only a byte)
 0060 3A00          CMP     A, [USBUART_t2]            ; Range check
 0062 CFA2          JC      USBUART_Not_Supported
 0064           
 0064 5000          MOV     A,>USBUART_DEVICE_DESCR_TABLE  ; Get the ROM Address MSB
 0066           
 0066 824A          JMP     USBUART_GetTableEntry_Local_Std
 0068           ;-----------------------------------------------------------------------------
 0068           ; String Descriptor Handler
 0068           ;-----------------------------------------------------------------------------
                IF  USBUART_bNumStringDescrs    ; Not needed if we don't have any String Descriptors
 0068           USBUART_SendStringDescr:
 0068 5D5A          MOV     A, REG[USBUART_EP0DATA+wValueLo]  ; Get the descriptor index
 006A 5300          MOV     [USBUART_t2], A            ; Use the UM temp var--Selector
 006C           
 006C 5000          MOV     A,>USBUART_StringTable     ; Get the ROM Address MSB
 006E 5700          MOV     X,<USBUART_StringTable     ; Get the ROM Address LSB
 0070 28            ROMX                               ; First entry is the table size (only a byte)
 0071 3A00          CMP     A, [USBUART_t2]            ; Range check
 0073 CF91          JC      USBUART_Not_Supported
 0075           
 0075 5000          MOV     A,>USBUART_StringTable     ; Get the ROM Address MSB
 0077           
 0077 8239          JMP     USBUART_GetTableEntry_Local_Std
                ENDIF
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_CB_d2h_std_dev_08
                ;
                ;  DESCRIPTION:   Get Device Configuration
                ;
                ;****************************************************************
                ; STANDARD DEVICE IN REQUEST: Get_Device_Configuration
                ;****************************************************************
                ;
                ; bmRequestType  : (IN | STANDARD | DEVICE)       = 80h
                ; bRequest       : GET_CONFIGURATION              = 08h    
                ; wValue         : RESERVED                       = 0000h  
                ; wIndex         : RESERVED                       = 0000h
                ; wLength        : SIZEOF_DEVICE_CONFIGURATION    = 0001h  
                ; 
                ; The GET_DEVICE_CONFIGURATION request returns the currently 
                ; selected device configuration number. 
                ;
                ; request_value and request_index contain 0000h. request_length 
                ; contains 0001h and the one-byte configuration number is returned 
                ; in a separate data transfer.
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_d2h_std_dev_08 & USB_UM_SUPPLIED)
 0079           .LITERAL
 0079           GetConfigTransferDescrTable:
 0079 00            DB      ((1) - 1)                 ; Number of table entries - 1
 007A 01            DB  USB_DS_RAM                             ; Data source (USB_DS_*)
 007B 0001          DW  1                             ; Transfer size
 007D 0000          DW  USBUART_Configuration                             ; Data source address
 007F 0000          DW  NULL_PTR                             ; Transfer Completion Status Block Address
 0081 DE            DB  0xde                           ; Reserved 
 0082           .ENDLITERAL
                export  USBUART_CB_d2h_std_dev_08
 0082           USBUART_CB_d2h_std_dev_08:
 0082 550000        MOV     [USBUART_t2], 0            ; Use the UM temp var--Selector
 0085 5079          MOV     A,>GetConfigTransferDescrTable  ; Get the ROM Address MSB
 0087 5779          MOV     X,<GetConfigTransferDescrTable  ; Get the ROM Address LSB
 0089 8227          JMP     USBUART_GetTableEntry_Local_Std
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_CB_h2d_std_dev_01
                ;
                ;  DESCRIPTION:   Clear Device Feature
                ;
                ;****************************************************************
                ; STANDARD DEVICE OUT REQUEST: Clear_Device_Feature
                ;****************************************************************
                ;
                ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                ; bRequest       : CLEAR_FEATURE                  = 01h    
                ; wValue         : FEATURE_SELECTOR               = --xxh  
                ; wIndex         : RESERVED                       = 0000h
                ; wLength        : RESERVED                       = 0000h  
                ; 
                ; The CLEAR_DEVICE_FEATURE request disables a particular feature 
                ; for a device. The only feature supported for a device is the 
                ; REMOTE_WAKEUP feature.
                ; 
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_h2d_std_dev_01 & USB_UM_SUPPLIED)
                export  USBUART_CB_h2d_std_dev_01
 008B           USBUART_CB_h2d_std_dev_01:
 008B 5D5A          MOV     A, REG[USBUART_EP0DATA+wValueLo]  ; Get the Feature Selector
 008D                                                  ; Check against valid features
 008D                                                  ;  for device recipient
 008D 3901          CMP     A, USB_DEVICE_REMOTE_WAKEUP  ; Only remote wakeup is defined for clear
 008F BF75          JNZ     USBUART_Not_Supported      ;      
 0091 2600FD        AND     [USBUART_DeviceStatus], ~USB_DEVICE_STATUS_REMOTE_WAKEUP
 0094 821F          JMP     USBUART_NoDataStageControlTransfer_Local_Std
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_CB_h2d_std_dev_03
                ;
                ;  DESCRIPTION:   Set Device Feature
                ;
                ;****************************************************************
                ; STANDARD DEVICE OUT REQUEST: Set_Device_Feature
                ;****************************************************************
                ;
                ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                ; bRequest       : SET_FEATURE                    = 03h    
                ; wValue         : FEATURE_SELECTOR               = --xxh  
                ; wIndex         : RESERVED                       = 0000h
                ; wLength        : RESERVED                       = 0000h  
                ; 
                ; The SET_DEVICE_FEATURE request enables a particular feature
                ; on a device. The only feature supported for a device is the 
                ; REMOTE_WAKEUP feature.
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_h2d_std_dev_03 & USB_UM_SUPPLIED)
                export  USBUART_CB_h2d_std_dev_03
 0096           USBUART_CB_h2d_std_dev_03:
 0096 5D5A          MOV     A, REG[USBUART_EP0DATA+wValueLo]  ; Get the Feature Selector
 0098                                                  ; Check against valid features
 0098                                                  ;  for device recipient
 0098 3901          CMP     A, USB_DEVICE_REMOTE_WAKEUP  ; Remote wakeup?
 009A A007          JZ      .remote_wakeup
 009C           
 009C 3902          CMP     A, USB_TEST_MODE           ; Test Mode 
 009E A008          JZ      .test_mode
 00A0           ; Flow here for any other selector is invalid for device recipient
 00A0 8F64          JMP     USBUART_Not_Supported
 00A2           ; Jump here to enable remote wake up
 00A2           .remote_wakeup:
 00A2 2E0002        OR      [USBUART_DeviceStatus], USB_DEVICE_STATUS_REMOTE_WAKEUP
 00A5 8003          JMP     .finish
 00A7           ; Jump here to enable test mode
 00A7           .test_mode:
 00A7 8F5D          JMP     USBUART_Not_Supported
 00A9           .finish:
 00A9 820A          JMP     USBUART_NoDataStageControlTransfer_Local_Std
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_CB_h2d_std_dev_05
                ;
                ;  DESCRIPTION:   Set Device Address
                ;
                ;****************************************************************
                ; STANDARD DEVICE OUT REQUEST: Set_Device_Address
                ;****************************************************************
                ;
                ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                ; bRequest       : SET_ADDRESS                    = 05h    
                ; wValue         : DEVICE_ADDRESS                 = 00xxh  
                ; wIndex         : RESERVED                       = 0000h
                ; wLength        : RESERVED                       = 0000h  
                ; 
                ; The SET_DEVICE_ADDRESS request sets the USB device address
                ; for all future USB accesses. 
                ;
                ;****************************************************************
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                
                IF (USB_CB_SRC_h2d_std_dev_05 & USB_UM_SUPPLIED)
                export  USBUART_CB_h2d_std_dev_05
 00AB           USBUART_CB_h2d_std_dev_05:
 00AB                 
 00AB 550001        MOV     [USBUART_fDataPending], USB_ADDRESS_CHANGE_PENDING       
 00AE 5D5A          MOV     A, REG[USBUART_EP0DATA+wValueLo]       
 00B0 5300          MOV     [USBUART_TransferBuffer],A       
 00B2                                                              
 00B2 8201          JMP     USBUART_NoDataStageControlTransfer_Local_Std
                ENDIF
                
                
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_CB_h2d_std_dev_09
                ;
                ;  DESCRIPTION:   Set Configuration
                ;
                ;****************************************************************
                ; STANDARD DEVICE OUT REQUEST: Set_Device_Configuration
                ;****************************************************************
                ;
                ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                ; bRequest       : SET_CONFIGURATION              = 09h    
                ; wValue         : CONFIGURATION_VALUE            = --xxh  
                ; wIndex         : RESERVED                       = 0000h
                ; wLength        : RESERVED                       = 0000h  
                ; 
                ; The SET_DEVICE_CONFIGURATION request selects a device 
                ; configuration to be activated as the current configuration. 
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                
                IF (USB_CB_SRC_h2d_std_dev_09 & USB_UM_SUPPLIED)
                export  USBUART_CB_h2d_std_dev_09
 00B4           USBUART_CB_h2d_std_dev_09:
 00B4 9000          CALL    USBUART_GET_DEVICE_TABLE_ENTRY  ; Get the selected device
 00B6 550000        MOV     [USBUART_t2],USBUART_t1    ; Set the GETWORD destination 
 00B9 9000          CALL    USBUART_GETWORD            ; Get the pointer to the CONFIG_LOOKUP table
 00BB                                                  ; ITempW has the address
 00BB 5D5A          MOV     A, REG[USBUART_EP0DATA+wValueLo]  ; Get the configuration number
 00BD 5300          MOV     [USBUART_t2],A             ; Save it 
 00BF 5100          MOV     A, [USBUART_t1]            ; Get the CONFIG_LOOKUP ROM Address MSB
 00C1 5801          MOV     X, [USBUART_t1+1]          ; Get the CONFIG_LOOKUP ROM Address LSB
 00C3 28            ROMX                               ; First entry is the table size (only a byte)
 00C4 3A00          CMP     A, [USBUART_t2]            ; Range check
 00C6 CF3E          JC      USBUART_Not_Supported
 00C8           
 00C8           ; Refactored from the two loops below
 00C8 5F0000        MOV     [USBUART_Configuration],[USBUART_t2]  ; Save the config number
 00CB           
 00CB 3C0000        CMP     [USBUART_t2], 0            ; Unconfigure?
 00CE A025          JZ      .unconfigure
 00D0           
 00D0           ; Flow here to configure the endpoints
 00D0 5100          MOV     A, [USBUART_t1]            ; Get the CONFIG_LOOKUP ROM Address MSB
 00D2 5801          MOV     X, [USBUART_t1+1]          ; Get the CONFIG_LOOKUP ROM Address LSB
 00D4 75            INC     X                          ; Point to the first table entry
 00D5 0900          ADC     A, 0                       ;
 00D7 550000        MOV    [USBUART_t2], USBUART_t1    ; Set up the destination  
 00DA 9000          CALL    USBUART_GETWORD            ; Get the pointer to the CONFIG_LOOKUP table
 00DC                                                  ; ITempW has the address
 00DC 5700          MOV     X, 0                       ; Start the index at 0, but we INC first
 00DE           .configure_next:
 00DE 75            INC     X                          ; Do the next one
 00DF 10            PUSH    X                          ; Save the endpoint number
 00E0 5100          MOV     A, [USBUART_t1]            ; Get the CONFIG_LOOKUP ROM Address MSB
 00E2 5801          MOV     X, [USBUART_t1+1]          ; Get the CONFIG_LOOKUP ROM Address LSB
 00E4 28            ROMX
 00E5 7601          INC     [USBUART_t1+1]             ; Point to the next 
 00E7 0E0000        ADC     [USBUART_t1], 0            ;
 00EA 20            POP     X
 00EB 90B8          CALL    ConfigureEP                ; X contains the EP number
 00ED                                                  ; A contains the EP Direction
 00ED 5B            MOV     A, X                       ; 
 00EE 3904          CMP     A, USB_MAX_EP_NUMBER       ; Configure each of the endpoints
 00F0 BFED          JNZ     .configure_next            ; Do another one?
 00F2           ; Flow here when we are done
 00F2 8010          JMP     .done
 00F4           
 00F4           ; Jump here to unconfigure the endpoints
 00F4           .unconfigure:
 00F4 7110          or    F, FLAG_XIO_MASK
 00F6 5704          MOV     X, USB_MAX_EP_NUMBER       ; Configure each of the endpoints
 00F8           .unconfigure_next:
 00F8 560002        MOV     [X+USBUART_EndpointAPIStatus], NO_EVENT_ALLOWED ; For the API
 00FB 63C300        MOV     REG[X+USBUART_EP1MODE-1], USB_MODE_DISABLE ; Disable the endpoint
 00FE 79            DEC     X                          ; One more down
 00FF BFF8          JNZ     .unconfigure_next          ; Don't unconfigure EP0
 0101 70EF          and   F, ~FLAG_XIO_MASK
 0103           .done:
 0103 81B0          JMP     USBUART_NoDataStageControlTransfer_Local_Std
                ENDIF
                
                
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_CB_d2h_std_ifc_00
                ;
                ;  DESCRIPTION:   Get Interface Status
                ;
                ;****************************************************************
                ; STANDARD INTERFACE IN REQUEST: Get_Interface_Status
                ;****************************************************************
                ;
                ; bmRequestType  : (IN | STANDARD | INTERFACE)    = 81h    
                ; bRequest       : GET_STATUS                     = 00h    
                ; wValue         : RESERVED                       = 0000h  
                ; wIndex         : INTERFACE                      = --xxh
                ; wLength        : SIZEOF_INTERFACE_STATUS        = 0002h  
                ; 
                ; The GET_INTERFACE_STATUS request returns status for the 
                ; specified interface.
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_d2h_std_ifc_00 & USB_UM_SUPPLIED)
 0105           .LITERAL
 0105           GetInterfaceStatusTransferDescrTable:
 0105 00            DB      ((1) - 1)                 ; Number of table entries - 1
 0106 01            DB  USB_DS_RAM                             ; Data source (USB_DS_*)
 0107 0002          DW  2                             ; Transfer size
 0109 0000          DW  USBUART_TransferBuffer                             ; Data source address
 010B 0000          DW  NULL_PTR                             ; Transfer Completion Status Block Address
 010D DE            DB  0xde                           ; Reserved 
 010E           .ENDLITERAL
                export  USBUART_CB_d2h_std_ifc_00
 010E           USBUART_CB_d2h_std_ifc_00:
 010E           
 010E 550000        MOV     [USBUART_TransferBuffer], 0     ; Zero the transfer buffer
 0111 550100        MOV     [USBUART_TransferBuffer+1], 0  ; 
 0114           
 0114 550000        MOV     [USBUART_t2], 0            ; Use the UM temp var--Selector
 0117 5005          MOV     A,>GetInterfaceStatusTransferDescrTable  ; Get the ROM Address MSB
 0119 5705          MOV     X,<GetInterfaceStatusTransferDescrTable  ; Get the ROM Address LSB
 011B           
 011B 8195          JMP     USBUART_GetTableEntry_Local_Std
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_CB_d2h_std_ifc_10
                ;
                ;  DESCRIPTION:   Get Interface
                ;
                ;****************************************************************
                ; STANDARD INTERFACE IN REQUEST: Get_Interface
                ;****************************************************************
                ;
                ; bmRequestType  : (IN | STANDARD | INTERFACE)    = 81h
                ; bRequest       : GET_INTERFACE                  = 0Ah    
                ; wValue         : RESERVED                       = 0000h  
                ; wIndex         : INTERFACE                      = xxxxh
                ; wLength        : SIZEOF_GET_INTERFACE           = 0001h  
                ; 
                ; The GET_INTERFACE request returns the selected alternate 
                ; setting for the specified interface. 
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                
                IF (USB_CB_SRC_d2h_std_ifc_10 & USB_UM_SUPPLIED)
 011D           .LITERAL
 011D           GetInterfaceTransferDescrTable:
 011D 00            DB      ((1) - 1)                 ; Number of table entries - 1
 011E 01            DB  USB_DS_RAM                             ; Data source (USB_DS_*)
 011F 0001          DW  1                             ; Transfer size
 0121 0000          DW  USBUART_TransferBuffer                             ; Data source address
 0123 0000          DW  NULL_PTR                             ; Transfer Completion Status Block Address
 0125 DE            DB  0xde                           ; Reserved 
 0126           .ENDLITERAL
                export  USBUART_CB_d2h_std_ifc_10
 0126           USBUART_CB_d2h_std_ifc_10:
 0126 5D5C          MOV     A, REG[USBUART_EP0DATA+wIndexLo]  ; Get the interface number
 0128 3902          CMP     A, 2                       ; Valid interface number? (UM Parameter: NumInterfaces)
 012A DEDA          JNC     USBUART_Not_Supported
 012C           
 012C 5C            MOV     X, A                       ; The interface number is the index into alternates settings table
 012D           
 012D 5200          MOV     A, [X + USBUART_InterfaceSetting]  ; Save the current interface setting
 012F 5300          MOV     [USBUART_TransferBuffer], A     ; into the transfer buffer
 0131           
 0131 550000        MOV     [USBUART_t2], 0            ; Use the UM temp var--Selector
 0134 501D          MOV     A,>GetInterfaceTransferDescrTable  ; Get the ROM Address MSB
 0136 571D          MOV     X,<GetInterfaceTransferDescrTable  ; Get the ROM Address LSB
 0138           
 0138 8178          JMP     USBUART_GetTableEntry_Local_Std
                ENDIF
                
                
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_CB_d2h_std_ep_00
                ;
                ;  DESCRIPTION:   Get Endpoint Status
                ;
                ;****************************************************************
                ; STANDARD ENDPOINT IN REQUEST: Get_Endpoint_Status
                ;****************************************************************
                ;
                ; bmRequestType  : (IN | STANDARD | ENDPOINT)     = 82h    
                ; bRequest       : GET_STATUS                     = 00h    
                ; wValue         : RESERVED                       = 0000h  
                ; wIndex         : ENDPOINT                       = 00xxh
                ; wLength        : SIZEOF_ENDPOINT_STATUS         = 0002h  
                ; 
                ; The GET_ENDPOINT_STATUS request returns status for the specified 
                ; endpoint.
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_d2h_std_ep_00 & USB_UM_SUPPLIED)
                export  USBUART_CB_d2h_std_ep_00
 013A           USBUART_CB_d2h_std_ep_00:
 013A 5D5C          MOV     A, REG[USBUART_EP0DATA+wIndexLo]  ; Get the endpoint number
 013C 217F          AND     A, ~USB_DIR_IN             ; Strip off the direction bit
 013E 3905          CMP     A, USB_NUM_ENDPOINTS       ; Range check
 0140 DEC4          JNC     USBUART_Not_Supported
 0142           
 0142 5C            MOV     X, A                       ; The endpoint number is the index
 0143           
 0143 550000        MOV     [USBUART_t2], 0            ; Use the UM temp var--Selector
 0146           
 0146 550100        MOV     [USBUART_TransferBuffer + 1], 0  ; Use the UM Transfer Buffer
 0149 5200          MOV     A, [X + USBUART_EndpointStatus]  ; Get the status
 014B 5300          MOV     [USBUART_TransferBuffer], A  ; Save it in the report
 014D           
 014D 500C          MOV     A,>GetStatusTransferDescrTable  ; Get the ROM Address MSB
 014F 570C          MOV     X,<GetStatusTransferDescrTable  ; Get the ROM Address LSB
 0151           
 0151 815F          JMP     USBUART_GetTableEntry_Local_Std
                ENDIF
                
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_CB_h2d_std_ep_01
                ;
                ;  DESCRIPTION:   Clear Endpoint Feature
                ;
                ;****************************************************************
                ; STANDARD ENDPOINT OUT REQUEST: Clear_Endpoint_Feature
                ;****************************************************************
                ;
                ; bmRequestType  : (OUT | STANDARD | ENDPOINT)    = 02h
                ; bRequest       : CLEAR_FEATURE                  = 01h    
                ; wValue         : FEATURE_SELECTOR               = --xxh  
                ; wIndex         : ENDPOINT                       = 00xxh
                ; wLength        : RESERVED                       = 0000h  
                ; 
                ; The CLEAR_ENDPOINT_FEATURE request disables a particular 
                ; feature for an endpoint. 
                ;
                ; The only feature supported for an endpoint is the EP_HALT 
                ; feature.
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_h2d_std_ep_01 & USB_UM_SUPPLIED)
                export  USBUART_CB_h2d_std_ep_01
 0153           USBUART_CB_h2d_std_ep_01:
 0153 5D5A          MOV     A, REG[USBUART_EP0DATA+wValueLo]  ; Get the feature selector
 0155 3900          CMP     A, USB_ENDPOINT_HALT       ; Halt is the only selector defined for endpoints
 0157 BEAD          JNZ     USBUART_Not_Supported
 0159           
 0159 5D5C          MOV     A, REG[USBUART_EP0DATA+wIndexLo]  ; Get the Endpoint number
 015B 217F          AND     A, ~USB_DIR_IN             ; Strip off the direction bit
 015D 3900          CMP     A, 0                       ; Since we can't halt the Control Endpoint
 015F A018          JZ      .done
 0161           
 0161 3905          CMP     A, USB_NUM_ENDPOINTS       ; Range check
 0163 DEA1          JNC     USBUART_Not_Supported
 0165           
 0165 5C            MOV     X, A                       ; Endpoint number is the index
 0166 2700FE        AND     [X+USBUART_EndpointStatus], ~USB_ENDPOINT_STATUS_HALT  ; Clear the endpoint halt
 0169           
 0169 495C80        TST     REG[USBUART_EP0DATA+wIndexLo], USB_DIR_IN  ; IN or OUT endpoint?
 016C 7110          or    F, FLAG_XIO_MASK
 016E B006          JNZ     .in
 0170           
 0170 63C308        MOV     REG[X + USBUART_EP1MODE - 1], USB_MODE_NAK_OUT  ; NAK the endpoint
 0173 8004          JMP     .done    
 0175           .in:
 0175 63C30C        MOV     REG[X + USBUART_EP1MODE - 1], USB_MODE_NAK_IN  ; NAK the endpoint
 0178           .done:
 0178 70EF          and   F, ~FLAG_XIO_MASK
 017A 8139          JMP     USBUART_NoDataStageControlTransfer_Local_Std
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBUART_CB_h2d_std_ep_03
                ;
                ;  DESCRIPTION:   Set Endpoint Feature
                ;
                ;****************************************************************
                ; STANDARD ENDPOINT OUT REQUEST: Set_Endpoint_Feature
                ;****************************************************************
                ;
                ; bmRequestType  : (OUT | STANDARD | ENDPOINT)    = 02h
                ; bRequest       : SET_FEATURE                    = 03h    
                ; wValue         : FEATURE_SELECTOR               = --xxh  
                ; wIndex         : ENDPOINT                       = 00xxh
                ; wLength        : RESERVED                       = 0000h  
                ; 
                ; The SET_ENDPOINT_FEATURE request enables a particular feature
                ; for a specific endpoint. The only feature supported for an 
                ; endpoint is the EP_HALT feature.
                ; 
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_h2d_std_ep_03 & USB_UM_SUPPLIED)
                export  USBUART_CB_h2d_std_ep_03
 017C           USBUART_CB_h2d_std_ep_03:
 017C 5D5A          MOV     A, REG[USBUART_EP0DATA+wValueLo]  ; Get the feature selector
 017E 3900          CMP     A, USB_ENDPOINT_HALT       ; Halt is the only selector defined for endpoints
 0180 BE84          JNZ     USBUART_Not_Supported
 0182           
 0182 5D5C          MOV     A, REG[USBUART_EP0DATA+wIndexLo]  ; Get the Endpoint number
 0184 217F          AND     A, ~USB_DIR_IN             ; Strip off the direction bit
 0186 3900          CMP     A, 0                       ; Never halt the Control Endpoint
 0188 A018          JZ      .done
 018A           
 018A 3905          CMP     A, USB_NUM_ENDPOINTS       ; Range check
 018C DE78          JNC     USBUART_Not_Supported
 018E           
 018E 5C            MOV     X, A                       ; Endpoint number is the index
 018F           
 018F 2F0001        OR      [X+USBUART_EndpointStatus], USB_ENDPOINT_STATUS_HALT  ; Halt the endpoint
 0192           
 0192 495C80        TST     REG[USBUART_EP0DATA+wIndexLo], USB_DIR_IN  ; IN or OUT endpoint?
 0195 7110          or    F, FLAG_XIO_MASK
 0197 B006          JNZ     .in
 0199           
 0199 63C389        MOV     REG[X + USBUART_EP1MODE - 1], USB_MODE_STALL_DATA_EP | USB_MODE_ACK_OUT  ; Stall the endpoint
 019C 8004          JMP     .done    
 019E           .in:
 019E 63C38D        MOV     REG[X + USBUART_EP1MODE - 1], USB_MODE_STALL_DATA_EP | USB_MODE_ACK_IN  ; Stall the endpoint
 01A1           .done:        
 01A1 70EF          and   F, ~FLAG_XIO_MASK
 01A3 8110          JMP     USBUART_NoDataStageControlTransfer_Local_Std
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: ConfigureEP
                ;
                ;  DESCRIPTION:   Configure an endpoint
                ;
                ;  ARGUMENTS:    A contains the endpoint direction
                ;                X contains the endpoint number
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS:  The A REGISTER IS VOLATILE.  X REGISTER IS MAINTAINED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
 01A5           ConfigureEP:
 01A5 397F          CMP     A, USB_DIR_UNUSED          ; Is this endpoint unused?
 01A7 B002          JNZ     .enable                    ; Only enable it if it is used
 01A9 7F            RET                                ; Quick exit if this endpoint is unused
 01AA           
 01AA           ; Jump here to enable an endpoint
 01AA           .enable:
 01AA 08            PUSH    A                                   ; Save the endpoint direction
 01AB 5B            MOV     A, X                              ; We are using a JACC to dispatch to enable the interrupt
 01AC 64            ASL     A                                   ;  
 01AD E001          JACC    .EP_INT_ENABLE             ;  
 01AF           
 01AF           
 01AF           .EP_INT_ENABLE:
 01AF 8009          JMP     .EP0IntEnable              ; Enable EP0
 01B1 800C          JMP     .EP1IntEnable              ; Enable EP1
 01B3 800F          JMP     .EP2IntEnable              ; Enable EP2
 01B5 8012          JMP     .EP3IntEnable              ; Enable EP3
 01B7 8015          JMP     .EP4IntEnable              ; Enable EP4
 01B9           
 01B9           ; Jump here to enable EP0 Interrupts
 01B9           .EP0IntEnable:
 01B9 43DF04        or    reg[USBUART_INT_REG], USBUART_INT_EP0_MASK               ; enable specified interrupt enable bit
 01BC           ;    JMP   .exit2
 01BC 8015          JMP   .cont
 01BE           .EP1IntEnable:
 01BE 43DF08        or    reg[USBUART_INT_REG], USBUART_INT_EP1_MASK               ; enable specified interrupt enable bit
 01C1 8010          JMP   .cont
 01C3           .EP2IntEnable:
 01C3 43DF10        or    reg[USBUART_INT_REG], USBUART_INT_EP2_MASK               ; enable specified interrupt enable bit
 01C6 800B          JMP   .cont
 01C8           .EP3IntEnable:
 01C8 43DF20        or    reg[USBUART_INT_REG], USBUART_INT_EP3_MASK               ; enable specified interrupt enable bit
 01CB 8006          JMP   .cont
 01CD           .EP4IntEnable:
 01CD 43DF40        or    reg[USBUART_INT_REG], USBUART_INT_EP4_MASK               ; enable specified interrupt enable bit
 01D0 8001              JMP   .cont
 01D2           
 01D2           ; Jump or flow here to continue configuring the endpoint    
 01D2           ;.contEP0:
 01D2           ;    POP   A                           ; Get the endpoint direction back
 01D2           ;    AND   A, USB_DIR_IN               ; Is it an IN endpoint?
 01D2           ;    JNZ   .inEP0                      ; Jump on IN
 01D2           ; Flow here for an OUT Endpoint
 01D2           ;    MOV   [USBUART_TempMode], USB_MODE_NAK_OUT ; NAK the endpoint
 01D2           ;    JMP   .exit2
 01D2           ; Jump here for an IN Endpoint
 01D2           ;.inEP0:
 01D2           ;    MOV   [USBUART_TempMode], USB_MODE_NAK_IN ; NAK the endpoint
 01D2           ;       JMP   .exit2
 01D2           .cont:
 01D2 5B            MOV     A, X                              ; Get the endpoint number from X
 01D3 FE2B          INDEX   USBUART_USB_EP_BIT_LOOKUP    ; Find bit position for endpoint
 01D5 31FF          XOR     A, FFh
 01D7 2400          AND     [USBUART_EPDataToggle], A ; Clear the data toggle for this endpoint
 01D9           
 01D9           ; if endpoint 0 set EP0MODE
 01D9           ; then exit
 01D9           ;    MOV     A, X                            ; Get the endpoint number from X
 01D9           ;    CMP     A, EP0                        ; Is this endpoint zero?
 01D9           ;    JNZ     .enable                   ; Only enable it if it is used
 01D9           
 01D9 7110          or    F, FLAG_XIO_MASK
 01DB 18            POP   A                            ; Get the endpoint direction back
 01DC 2180          AND   A, USB_DIR_IN                ; Is it an IN endpoint?
 01DE B009          JNZ   .in                          ; Jump on IN
 01E0           ; Flow here for an OUT Endpoint
 01E0 63C308        MOV   REG[X+USBUART_EP1MODE-1], USB_MODE_NAK_OUT ; NAK the endpoint
 01E3 560000        MOV   [X+USBUART_EndpointAPIStatus], NO_EVENT_PENDING ; For the API
 01E6 8004          JMP   .exit1
 01E8           ; Jump here for an IN Endpoint
 01E8           .in:
 01E8 63C30C        MOV   REG[X+USBUART_EP1MODE-1], USB_MODE_NAK_IN ; NAK the endpoint
 01EB           ; Jump or flow here to set the API event and exit    
 01EB           .exit1:
 01EB 70EF          and   F, ~FLAG_XIO_MASK
 01ED           .exit2:
 01ED           ;    MOV   [X+USBUART_EPDataToggle], 0  ; Clear all EP data toggles?  Is this right?
 01ED 560001        MOV   [X+USBUART_EndpointAPIStatus], EVENT_PENDING ; For the API
 01F0 7F            RET
 01F1           
 01F1           ;-----------------------------------------------------------------------------
 01F1           ;  USB 2nd Tier Dispatch Jump Tables for Standard Requests (based on bRequest)
 01F1           ;-----------------------------------------------------------------------------
 01F1           ;  FUNCTION NAME: ;  USB 2nd Tier Dispatch Jump Table
 01F1           ;
 01F1           ;  DESCRIPTION:   The following tables dispatch to the Standard request handler
 01F1           ;                 functions.  (Assumes bmRequestType(5:6) is 0, Standard)
 01F1           ;
 01F1           ;-----------------------------------------------------------------------------
 01F1           ;
 01F1           ;  ARGUMENTS:
 01F1           ;
 01F1           ;  RETURNS:
 01F1           ;
 01F1           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01F1           ;
 01F1           ;  THEORY of OPERATION or PROCEDURE:
 01F1           ;
 01F1           ;-----------------------------------------------------------------------------
 01F1           USBUART_DT_d2h_std_dev:
 01F1           ;-----------------------------------------------------------------------------
 01F1           
 01F1 8E23          jmp     USBUART_CB_d2h_std_dev_00
 01F3 8E11          jmp     USBUART_CB_d2h_std_dev_01
 01F5 8E0F          jmp     USBUART_CB_d2h_std_dev_02
 01F7 8E0D          jmp     USBUART_CB_d2h_std_dev_03
 01F9 8E0B          jmp     USBUART_CB_d2h_std_dev_04
 01FB 8E09          jmp     USBUART_CB_d2h_std_dev_05
 01FD 8E26          jmp     USBUART_CB_d2h_std_dev_06
 01FF 8E05          jmp     USBUART_CB_d2h_std_dev_07
 0201 8E80          jmp     USBUART_CB_d2h_std_dev_08
 0203           
 0203           USBUART_DT_d2h_std_dev_End:
 0009           USBUART_DT_d2h_std_dev_Size: equ (USBUART_DT_d2h_std_dev_End-USBUART_DT_d2h_std_dev) / 2
 0203           USBUART_DT_d2h_std_dev_Dispatch::
 0203 5D59          MOV    A, REG[USBUART_EP0DATA + bRequest]
 0205 3909          CMP   A,USBUART_DT_d2h_std_dev_Size
 0207 D004          JNC   .dispatch_not_supported
 0209 64            ASL   A
 020A EFE6          JACC  USBUART_DT_d2h_std_dev
 020C           .dispatch_not_supported:
 020C 7D0005        LJMP  USBUART_Not_Supported    
 020F           
 020F           ;-----------------------------------------------------------------------------
 020F           USBUART_DT_h2d_std_dev:
 020F           ;-----------------------------------------------------------------------------
 020F           
 020F 8DF5          jmp     USBUART_CB_h2d_std_dev_00
 0211 8E79          jmp     USBUART_CB_h2d_std_dev_01
 0213 8DF1          jmp     USBUART_CB_h2d_std_dev_02
 0215 8E80          jmp     USBUART_CB_h2d_std_dev_03
 0217 8DED          jmp     USBUART_CB_h2d_std_dev_04
 0219 8E91          jmp     USBUART_CB_h2d_std_dev_05
 021B 8DE9          jmp     USBUART_CB_h2d_std_dev_06
 021D 8DE7          jmp     USBUART_CB_h2d_std_dev_07
 021F 8DE5          jmp     USBUART_CB_h2d_std_dev_08
 0221 8E92          jmp     USBUART_CB_h2d_std_dev_09
 0223           
 0223           USBUART_DT_h2d_std_dev_End:
 000A           USBUART_DT_h2d_std_dev_Size: equ (USBUART_DT_h2d_std_dev_End-USBUART_DT_h2d_std_dev) / 2
 0223           USBUART_DT_h2d_std_dev_Dispatch::
 0223           
 0223 5D59          MOV     A, REG[USBUART_EP0DATA + bRequest]
 0225 390A          CMP   A,USBUART_DT_h2d_std_dev_Size
 0227 D004          JNC   .dispatch_not_supported
 0229 64            ASL   A
 022A EFE4          JACC  USBUART_DT_h2d_std_dev
 022C           .dispatch_not_supported:
 022C 7D0005        LJMP  USBUART_Not_Supported    
 022F           
 022F           
 022F           ;-----------------------------------------------------------------------------
 022F           USBUART_DT_d2h_std_ifc:
 022F           ;-----------------------------------------------------------------------------
 022F           
 022F 8EDE          jmp     USBUART_CB_d2h_std_ifc_00
 0231 8DD3          jmp     USBUART_CB_d2h_std_ifc_01
 0233 8DD1          jmp     USBUART_CB_d2h_std_ifc_02
 0235 8DCF          jmp     USBUART_CB_d2h_std_ifc_03
 0237 8DCD          jmp     USBUART_CB_d2h_std_ifc_04
 0239 8DCB          jmp     USBUART_CB_d2h_std_ifc_05
 023B 8DC9          jmp     USBUART_CB_d2h_std_ifc_06
 023D 8DC7          jmp     USBUART_CB_d2h_std_ifc_07
 023F 8DC5          jmp     USBUART_CB_d2h_std_ifc_08
 0241 8DC3          jmp     USBUART_CB_d2h_std_ifc_09
 0243 8EE2          jmp     USBUART_CB_d2h_std_ifc_10
 0245           
 0245           USBUART_DT_d2h_std_ifc_End:
 000B           USBUART_DT_d2h_std_ifc_Size: equ (USBUART_DT_d2h_std_ifc_End-USBUART_DT_d2h_std_ifc) / 2
 0245           USBUART_DT_d2h_std_ifc_Dispatch::
 0245 3C0000        CMP     [USBUART_Configuration], 0 ; Is the device configured?
 0248 B003          JNZ     .configured                ; Jump on configured
 024A 8DBA          JMP    _USBUART_Not_Supported      ; Stall the request if not configured
 024C           ; Jump here if the device is configured
 024C           .configured:
 024C 5D59          MOV     A, REG[USBUART_EP0DATA + bRequest]
 024E 390B          CMP   A,USBUART_DT_d2h_std_ifc_Size
 0250 D004          JNC   .dispatch_not_supported
 0252 64            ASL   A
 0253 EFDB          JACC  USBUART_DT_d2h_std_ifc
 0255           .dispatch_not_supported:
 0255 7D0005        LJMP  USBUART_Not_Supported    
 0258           
 0258           ;-----------------------------------------------------------------------------
 0258           USBUART_DT_h2d_std_ifc:
 0258           ;-----------------------------------------------------------------------------
 0258           
 0258 8DAC          jmp     USBUART_CB_h2d_std_ifc_00
 025A           
 025A           USBUART_DT_h2d_std_ifc_End:
 0001           USBUART_DT_h2d_std_ifc_Size: equ (USBUART_DT_h2d_std_ifc_End-USBUART_DT_h2d_std_ifc) / 2
 025A           USBUART_DT_h2d_std_ifc_Dispatch::
 025A 3C0000        CMP     [USBUART_Configuration], 0 ; Is the device configured?
 025D B003          JNZ     .configured                ; Jump on configured
 025F 8DA5          JMP    _USBUART_Not_Supported      ; Stall the request if not configured
 0261           ; Jump here if the device is configured
 0261           .configured:
 0261 5D59          MOV     A, REG[USBUART_EP0DATA + bRequest]
 0263 3901          CMP   A,USBUART_DT_h2d_std_ifc_Size
 0265 D004          JNC   .dispatch_not_supported
 0267 64            ASL   A
 0268 EFEF          JACC  USBUART_DT_h2d_std_ifc
 026A           .dispatch_not_supported:
 026A 7D0005        LJMP  USBUART_Not_Supported    
 026D           
 026D           ;-----------------------------------------------------------------------------
 026D           USBUART_DT_d2h_std_ep:
 026D           ;-----------------------------------------------------------------------------
 026D 8ECC          jmp     USBUART_CB_d2h_std_ep_00
 026F           
 026F           USBUART_DT_d2h_std_ep_End:
 0001           USBUART_DT_d2h_std_ep_Size: equ (USBUART_DT_d2h_std_ep_End-USBUART_DT_d2h_std_ep) / 2
 026F           USBUART_DT_d2h_std_ep_Dispatch::
 026F 3C0000        CMP     [USBUART_Configuration], 0 ; Is the device configured?
 0272 B00D          JNZ     .configured                ; Jump on configured
 0274           
 0274 5D5D          MOV     A, REG[USBUART_EP0DATA + wIndexHi] ; Is the request for EP0?
 0276 5300          MOV     [USBUART_t2], A            ; Use the UM temp var--Selector
 0278 5D5C          MOV     A, REG[USBUART_EP0DATA + wIndexLo] ;
 027A 2C00          OR      [USBUART_t2], A            ; Use the UM temp var--Selector
 027C A003          JZ      .ep0_request
 027E           
 027E 8D86          JMP    _USBUART_Not_Supported      ; Stall the request if not configured
 0280           ; Jump here if the device is configured or EP0 request
 0280           .configured:
 0280           .ep0_request:
 0280 5D59          MOV     A, REG[USBUART_EP0DATA + bRequest]
 0282 3901          CMP   A,USBUART_DT_d2h_std_ep_Size
 0284 D004          JNC   .dispatch_not_supported
 0286 64            ASL   A
 0287 EFE5          JACC  USBUART_DT_d2h_std_ep
 0289           .dispatch_not_supported:
 0289 7D0005        LJMP  USBUART_Not_Supported    
 028C           
 028C           
 028C           ;-----------------------------------------------------------------------------
 028C           USBUART_DT_h2d_std_ep:
 028C           ;-----------------------------------------------------------------------------
 028C 8D78          jmp     USBUART_CB_h2d_std_ep_00
 028E 8EC4          jmp     USBUART_CB_h2d_std_ep_01
 0290 8D74          jmp     USBUART_CB_h2d_std_ep_02
 0292 8EE9          jmp     USBUART_CB_h2d_std_ep_03
 0294           
 0294           USBUART_DT_h2d_std_ep_End:
 0004           USBUART_DT_h2d_std_ep_Size: equ (USBUART_DT_h2d_std_ep_End-USBUART_DT_h2d_std_ep) / 2
 0294           USBUART_DT_h2d_std_ep_Dispatch::
 0294 3C0000        CMP     [USBUART_Configuration], 0 ; Is the device configured?
 0297 B00D          JNZ     .configured                ; Jump on configured
 0299           
 0299 5D5D          MOV     A, REG[USBUART_EP0DATA + wIndexHi] ; Is the request for EP0?
 029B 5300          MOV     [USBUART_t2], A            ; Use the UM temp var--Selector
 029D 5D5C          MOV     A, REG[USBUART_EP0DATA + wIndexLo] ;
 029F 2C00          OR      [USBUART_t2], A            ; Use the UM temp var--Selector
 02A1 A003          JZ      .ep0_request
 02A3           
 02A3 8D61          JMP    _USBUART_Not_Supported      ; Stall the request if not configured
 02A5           ; Jump here if the device is configured or EP0 request
 02A5           .configured:
 02A5           .ep0_request:
 02A5 5D59          MOV     A, REG[USBUART_EP0DATA + bRequest]
 02A7 3904          CMP   A,USBUART_DT_h2d_std_ep_Size
 02A9 D004          JNC   .dispatch_not_supported
 02AB 64            ASL   A
 02AC EFDF          JACC  USBUART_DT_h2d_std_ep
 02AE           .dispatch_not_supported:
 02AE 7D0005        LJMP  USBUART_Not_Supported    
 02B1           
 02B1           USBUART_GetTableEntry_Local_Std:
 02B1 7D0000        LJMP    USBUART_GetTableEntry
 02B4           
 02B4           USBUART_NoDataStageControlTransfer_Local_Std:
 02B4 7D0000        LJMP    USBUART_NoDataStageControlTransfer
 02B7           
 02B7           ;-----------------------------------------------
 02B7           ; Add custom application code for routines 
 02B7           ; redefined by USB_APP_SUPPLIED in USB_HID.INC
 02B7           ;-----------------------------------------------
 02B7           
 02B7              ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
 02B7              ;---------------------------------------------------
 02B7              ; Insert your custom code below this banner
 02B7              ;---------------------------------------------------
 02B7           
 02B7              ;---------------------------------------------------
 02B7              ; Insert your custom code above this banner
 02B7              ;---------------------------------------------------
 02B7              ;@PSoC_UserCode_END@ (Do not change this line.)
 02B7           
 02B7           ; End of File USBUART_std.asm
